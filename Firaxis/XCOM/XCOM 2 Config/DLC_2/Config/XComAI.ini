[XComGame.XComGameState_AIGroup]
+FallbackExclusionList="ViperKing"
+FallbackExclusionList="BerserkerQueen"
+FallbackExclusionList="ArchonKing"

[XComGame.XGAIBehavior]
; New AoE profiles
+AoEProfiles=( Profile=FrostbitePreferredProfile, Ability=Frostbite, bFailOnFriendlyFire=False, bIgnoreSelfDamage=true, bUsePrecomputePath=1, bFailOnObjectiveFire=false, MinTargets=2)
+AoEProfiles=( Profile=FrostbiteSingleProfile, Ability=Frostbite, bFailOnFriendlyFire=False, bIgnoreSelfDamage=true, bUsePrecomputePath=1, bFailOnObjectiveFire=false, MinTargets=1)
+AoEProfiles=( Profile=QuakeProfile, Ability=Quake, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, bPathToTarget=true, MinTargets=1)
+AoEProfiles=( Profile=KingBlazingPinionsBasicProfile, Ability=ArchonKingBlazingPinionsStage1, bFailOnObjectiveFire=false, bRequiresOutdoor=1)

[XComGame.XGAIPlayer]
; LastResortTargetEffects: Targets that have any of these effects will not be considered as valid targets
;                          unless no other targets are available.
;				Checked in BT under conditions: IsLastResortTarget, HasNonLastResortEnemies, IsTargetValidBasedOnLastResortEffects
;				Also used in destination searches for AI units, to ignore visibility checks against panicked and bound units 
;				            when other targets are available.
+LastResortTargetEffects=(EffectName="Stunned")
+LastResortTargetEffects=(EffectName="Unconscious")
+LastResortTargetEffects=(EffectName="Freeze")

[XComGame.X2AIBTBehaviorTree]
; new NodeType specifiers defined here.  i.e. NodeType=DLC2Conditions, defined in class X2AIBT_DLC_2Conditions
+CustomNodes=(NodeTypeString="DLC2Condition", ExtendsFromType="Condition", ClassName="DLC_2.X2AIBT_DLC_60Conditions")
+CustomNodes=(NodeTypeString="DLC2Action", ExtendsFromType="Action", ClassName="DLC_2.X2AIBT_DLC_60Actions")

;+EquivalentAbilities=( KeyName=Bind, EquivalentAbilityName[0]=KingBind ) // This causes problems with the Bind effect name being replaced with KingBind.
+EquivalentAbilities=( KeyName=GetOverHere, EquivalentAbilityName[0]=KingGetOverHere )
-EquivalentAbilities=( KeyName=StandardMelee, EquivalentAbilityName[0]=BigDamnPunch, EquivalentAbilityName[1]=DevastatingPunch, EquivalentAbilityName[2]=ChryssalidSlash, EquivalentAbilityName[3]=Bayonet, EquivalentAbilityName[4]=SwordSlice, EquivalentAbilityName[5]=Reaper, EquivalentAbilityName[6]=StunLance, EquivalentAbilityName[7]=AnimaConsume, EquivalentAbilityName[8]=ScythingClaws, EquivalentAbilityName[9]=Bind, EquivalentAbilityName[10]=ChryssalidSlashMP)
+EquivalentAbilities=( KeyName=StandardMelee, EquivalentAbilityName[0]=BigDamnPunch, EquivalentAbilityName[1]=DevastatingPunch, EquivalentAbilityName[2]=ChryssalidSlash, EquivalentAbilityName[3]=Bayonet, EquivalentAbilityName[4]=SwordSlice, EquivalentAbilityName[5]=Reaper, EquivalentAbilityName[6]=StunLance, EquivalentAbilityName[7]=AnimaConsume, EquivalentAbilityName[8]=ScythingClaws, EquivalentAbilityName[9]=Bind, EquivalentAbilityName[10]=ChryssalidSlashMP, EquivalentAbilityName[11]=ViperNeonateBindAbility, EquivalentAbilityName[12]=QueenDevastatingPunch, EquivalentAbilityName[13]=StandardMelee_NoEnd)

; ---------------- Ruler Behavior -----------------------------------
;Generic Ruler Behavior
+Behaviors=(BehaviorName=RulerBehavior, NodeType=Selector,	Child[0]="::RulerBranch", Child[1]=SkipMove)
+Behaviors=(BehaviorName="::RulerBranch", NodeType=Failer, Child[0]=SkipMove)

; Update the difficulty modifiers - All rulers should distribute attacks across all difficulty levels.  Non-ruler units only distribute at lower difficulty levels.
;  Shifting the BT children around to move the difficulty check down to the DistributeAttacks level.
-Behaviors=(BehaviorName=ApplyDifficultyModifiersBase, NodeType=Sequence, Child[0]=IsDifficultyLow, Child[1]=AddToTargetScore_20, Child[2]="::DistributeAttacks")
+Behaviors=(BehaviorName=ApplyDifficultyModifiersBase, NodeType=Selector, Child[0]=DistributeAttacksIfRuler, Child[1]=DistributeAttacksIfLowDifficulty)
+Behaviors=(BehaviorName=DistributeAttacksIfLowDifficulty, NodeType=Sequence, Child[0]=IsDifficultyLow, Child[1]=AddToTargetScore_20, Child[2]="::DistributeAttacks")
+Behaviors=(BehaviorName=IsRuler, NodeType=Selector, Child[0]=TemplateNameIs-ViperKing, Child[1]=TemplateNameIs-BerserkerQueen, Child[2]=TemplateNameIs-ArchonKing)
+Behaviors=(BehaviorName=DistributeAttacksIfRuler, NodeType=Sequence, Child[0]=IsRuler, Child[1]=DistributeAttacksRuler)
+Behaviors=(BehaviorName=DistributeAttacksRuler, NodeType=Selector, Child[0]=ScoreTargetOutIfCivilian, Child[1]=ScoreTargetOutIfMimicBeacon, Child[2]=ScoreIfTargetHasBeenAttackedTwice, Child[3]=RulerScoreIfTargetHasBeenAttackedOnce, Child[4]=AddToTargetScore_250)
+Behaviors=(BehaviorName=ScoreTargetOutIfMimicBeacon, NodeType=Sequence, Child[0]=TargetTemplateNameIs-MimicBeacon, Child[1]=AddToTargetScore_-1000)
+Behaviors=(BehaviorName=RulerScoreIfTargetHasBeenAttackedOnce, NodeType=Sequence, Child[0]=TargetHasBeenAttackedOnce, Child[1]=AddToTargetScore_125);   

; Define effects that prevent any ruler action.
+Behaviors=(BehaviorName=SkipPerEffects, NodeType=Sequence, Child[0]=UnderEffectToPreventActions, Child[1]=SkipMove)
+Behaviors=(BehaviorName=UnderEffectToPreventActions, NodeType=Selector, Child[0]=AffectedByEffect-Stunned, Child[1]=AffectedByEffect-Freeze)
+Behaviors=(BehaviorName=AffectedByEffect-Freeze, NodeType=Condition)
+Behaviors=(BehaviorName=AffectedByEffect-Stunned, NodeType=Condition)

; Unrevealed Behavior should follow standard green alert movement.
+Behaviors=(BehaviorName=RulerUnrevealedBehavior, NodeType=Sequence, Child[0]=NotYetRevealed, Child[1]=GenericAIRoot)

; Overwatched ruler behavior
+Behaviors=(BehaviorName=IsUnderOverwatch, NodeType=StatCondition, Param[0]=OverwatcherCount, Param[1]=">", Param[2]="0")

; Escape Behavior.
+Behaviors=(BehaviorName=RulerEscape, NodeType=Sequence, Child[0]=IsAbleToMove, Child[1]=TryEscapeOptions)
+Behaviors=(BehaviorName=IsAbleToMove, NodeType=DLC2Condition) ;Check if all pathing is obstructed.  If so, do other attacks.
+Behaviors=(BehaviorName=TryEscapeOptions, NodeType=Selector, Child[0]=ContinueRulerEscaping, Child[1]=TryBeginEscape)
+Behaviors=(BehaviorName=ContinueRulerEscaping, NodeType=Sequence, Child[0]=AffectedByEffect-CallForEscapeEffect, Child[1]=MoveToEscapeOrResummonGate)
+Behaviors=(BehaviorName=MoveToEscapeOrResummonGate, NodeType=Selector, Child[0]=TryMoveToEscape, Child[1]=ResummonGateIfNoPathToEscape)
+Behaviors=(BehaviorName=ResummonGateIfNoPathToEscape, NodeType=Sequence, Child[0]=PathToEscapeFails, Child[1]=DeleteOldEscapeAlertAndResummonGate)
+Behaviors=(BehaviorName=PathToEscapeFails, NodeType=DLC2Condition)
+Behaviors=(BehaviorName=DeleteOldEscapeAlertAndResummonGate, NodeType=Sequence, Child[0]=DeleteCurrentAlertData, Child[1]=TryEscapeAbility)
+Behaviors=(BehaviorName=TryMoveToEscape, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=RulerMoveToEscape)
+Behaviors=(BehaviorName=AffectedByEffect-CallForEscapeEffect, NodeType=Condition)
+Behaviors=(BehaviorName=TryBeginEscape, NodeType=Sequence, Child[0]=CanAttemptEscape, Child[1]=EscapeThresholdHit, Child[2]=TryEscapeAbility)
+Behaviors=(BehaviorName=CanAttemptEscape, NodeType=DLC2Condition)
+Behaviors=(BehaviorName=EscapeThresholdHit, NodeType=Selector, Child[0]=RulerHealthBelowThreshold, Child[1]=RulerDisabledEnoughEnemiesToEscape)
+Behaviors=(BehaviorName=RulerHealthBelowThreshold, NodeType=DLC2Condition)
+Behaviors=(BehaviorName=RulerDisabledEnoughEnemiesToEscape, NodeType=DLC2Condition)
+Behaviors=(BehaviorName=TryEscapeAbility, NodeType=Sequence, Child[0]=IsAbilityAvailable-AlienRulerCallForEscape, Child[1]=SetEscapeDestination, Child[2]=SelectAbility-AlienRulerCallForEscape)
+Behaviors=(BehaviorName=IsAbilityAvailable-AlienRulerCallForEscape, NodeType=Condition)
+Behaviors=(BehaviorName=SetEscapeDestination, NodeType=DLC2Action)
+Behaviors=(BehaviorName=SelectAbility-AlienRulerCallForEscape, NodeType=Action, Param[0]=UseDestination)
+Behaviors=(BehaviorName=RulerMoveToEscape, NodeType=Sequence, Child[0]=FindDestinationOnPathToEscape, Child[1]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindDestinationOnPathToEscape, NodeType=DLC2Action)

; Overwatch handling.  Allow movement 33% of the time when being overwatched.
;If under overwatch, mark safe to move 1/3 of the time.  Otherwise mark safe to move.
+Behaviors=(BehaviorName=RulerUpdateSafeToMoveVar, NodeType=Selector, Child[0]=RulerRollToMoveUnderOverwatch, Child[1]=SetSafeToMoveTrue)
+Behaviors=(BehaviorName=RulerRollToMoveUnderOverwatch, NodeType=Sequence, Child[0]=IsUnderOverwatch, Child[1]=Roll33ToSetSafeToMove)
+Behaviors=(BehaviorName=Roll33ToSetSafeToMove, NodeType=RandSelector, Child[0]=SetSafeToMoveTrue, Param[0]=33, Child[1]=SetSafeToMoveFalse, Param[1]=66)

; defaults that should be overridden per Ruler type.
+Behaviors=(BehaviorName="::RulerDisableAoE", NodeType=Failer, Child[0]=IsAbilityAvailable-StandardMove)
+Behaviors=(BehaviorName="::RulerSecondSpecialAbility", NodeType=Failer, Child[0]=IsAbilityAvailable-StandardMove)
+Behaviors=(BehaviorName="::RulerOtherAttack", NodeType=Selector, Child[0]="::RulerDisableAoE", Child[1]=DistributedMeleeAttackOrShot, Child[2]=RulerTryShootPriorityTarget, Child[3]=TryShootOrReload)
+Behaviors=(BehaviorName="::RulerMove", NodeType=Selector, Child[0]=TryFlankingMove, Child[1]=SelectMoveStandard, Child[2]=MoveToAlertData, Child[3]=HuntEnemyWithCover)
+Behaviors=(BehaviorName="::HasPotentialAoETarget", NodeType=Failer, Child[0]=DoRedScreenFailure-UndefinedNodeForRulerBT) ;Abstract node.
+Behaviors=(BehaviorName=DoRedScreenFailure-UndefinedNodeForRulerBT, NodeType=Action, Param[0]="RedScreen-Error On Ruler Behavior Tree! ::HasPotentialAoETarget not overridden! @acheng")
+Behaviors=(BehaviorName=MoveCloserToAoETarget, NodeType=Sequence, Child[0]="::HasPotentialAoETarget", Child[1]=FindDestinationTowardsAoEAttack, Child[2]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindDestinationTowardsAoEAttack, NodeType=DLC2Action)

; Check for Priority Movement- if flanked, move.  Also prefer to alternate moves and attacks.  Also force SafeToMove var to update here.
+Behaviors=(BehaviorName=TryMoveEveryOtherAction, NodeType=Sequence, Child[0]=DidntJustMove, Child[1]=Roll75ToMove)
+Behaviors=(BehaviorName=Roll75ToMove, NodeType=RandFilter, Child[0]="::RulerMove", Param[0]=75)

+Behaviors=(BehaviorName=IsActiveFlanked, NodeType=DLC2Condition) ; ActiveFlanked means the ruler is flanked by a unit with action points remaining.

;Prioritize flanked targets, then prioritize overwatchers.
+Behaviors=(BehaviorName=RulerTryShootPriorityTarget, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SetTargetStack-StandardShot, Child[2]=RulerSelectPriorityTarget, Child[3]=HasValidTarget-StandardShot, Child[4]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=RulerSelectPriorityTarget, NodeType=RepeatUntilFail, Child[0]=EvaluateRulerPriorityTarget)
+Behaviors=(BehaviorName=EvaluateRulerPriorityTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreFlanking, Child[2]=TargetScoreOverwatcher, Child[3]=TargetScoreInvalidateCivilians, Child[4]=DistributeAttacksRuler, Child[5]=AvoidBoundAndPanickedTargets, Child[6]=UpdateBestTarget)
+Behaviors=(BehaviorName=TargetScoreOverwatcher, NodeType=Selector, Child[0]=ScoreTargetIfOverwatcher, Child[1]=AddToTargetScore_0)
+Behaviors=(BehaviorName=ScoreTargetIfOverwatcher, NodeType=Sequence, Child[0]=IsTargetOverwatching, Child[1]=AddToTargetScore_40) 
+Behaviors=(BehaviorName=IsTargetOverwatching, NodeType=DLC2Condition)

;Mimic Beacon behavior for rulers
+Behaviors=(BehaviorName=RulerMimicBeaconBehavior, NodeType=Sequence, Child[0]=IsUnitTypeVisible-MimicBeacon, Child[1]="::RulerMoveOrAttackMimicBeacon")
+Behaviors=(BehaviorName="::RulerMoveOrAttackMimicBeacon", NodeType=Selector, Child[0]=RulerMoveTowardMimicBeacon, Child[1]="::AttackMimicBeacon"); If attack fails, just try moving closer.
+Behaviors=(BehaviorName=RulerMoveTowardMimicBeacon, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=DidntJustMove, Child[2]=RulerMimicBeaconRoll75ToMove)
+Behaviors=(BehaviorName=RulerMimicBeaconRoll75ToMove, NodeType=RandFilter, Child[0]="::MoveTowardMimicBeacon", Param[0]=75)

; Primary AoE attack happens 75% of the time when available.
+Behaviors=(BehaviorName=RulerPrimaryAoEAttack, NodeType=RandFilter, Child[0]="::RulerDisableAoE", Param[0]=75)
; ---------------- Viper King Behavior -----------------------------------
+Behaviors=(BehaviorName="ViperKing::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=ViperRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName="ViperKing::RulerBranch", NodeType=Selector,	\\
							Child[0]=ContinueKingBindInProgress,	\\
							Child[1]=SkipPerEffects,				\\
							Child[2]=RulerUnrevealedBehavior,		\\
							Child[3]=RulerEscape,					\\
							Child[4]="ViperKing::RulerDisableAoE",	\\
							Child[5]="::RulerSecondSpecialAbility", \\
							Child[6]=TrySingletonFrostbite,			\\
							Child[7]=ViperPriorityMovement,			\\
							Child[8]="::RulerOtherAttack",			\\
							Child[9]="::RulerMove")

+Behaviors=(BehaviorName=ContinueKingBindInProgress, NodeType=Sequence, Child[0]=AffectedByEffect-Bind, Child[1]=IsAbilityAvailable-KingBindSustained, Child[2]=SelectKingBindTarget, Child[3]=SelectAbility-KingBindSustained)
+Behaviors=(BehaviorName=SelectKingBindTarget, NodeType=Sequence, Child[0]=SetTargetStack-KingBindSustained, Child[1]=SelectSingletonTarget, Child[2]=HasValidTarget-KingBindSustained)
+Behaviors=(BehaviorName=SetTargetStack-KingBindSustained, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-KingBindSustained, NodeType=Condition)
+Behaviors=(BehaviorName=SelectSingletonTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=AddToTargetScore_100, Child[2]=UpdateBestTarget, Child[3]=NoNextTarget)
+Behaviors=(BehaviorName=NoNextTarget, NodeType=Inverter, Child[0]=SetNextTarget) 
+Behaviors=(BehaviorName=IsAbilityAvailable-KingBindSustained, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-KingBindSustained, NodeType=Action)

; Check for Priority Movement- if flanked, move.  Also prefer to alternate moves and attacks.  Also force SafeToMove var to update here.
+Behaviors=(BehaviorName=ViperPriorityMovement, NodeType=Selector, Child[0]=MoveCloserToAoETarget, Child[1]=MoveIfActiveFlanked, Child[2]=TryMoveEveryOtherAction)
+Behaviors=(BehaviorName=MoveIfActiveFlanked, NodeType=Sequence, Child[0]=RulerUpdateSafeToMoveVar, Child[1]=IsActiveFlanked, Child[2]="::RulerMove")

+Behaviors=(BehaviorName="ViperKing::RulerDisableAoE", NodeType=Sequence, Child[0]="::HasPotentialAoETarget", Child[1]=SelectAoETarget-FrostbitePreferredProfile, Child[2]=SelectAbility-Frostbite)
+Behaviors=(BehaviorName="ViperKing::RulerSecondSpecialAbility", NodeType=Sequence, Child[0]=IsAbilityReady-KingBind, Child[1]=MultipleValidTargetsRemain, Child[2]=TryKingBindOrGetOverHere)
+Behaviors=(BehaviorName="ViperKing::HasPotentialAoETarget", NodeType=Sequence, Child[0]=IsAbilityAvailable-Frostbite, Child[1]=FindPotentialFrostbiteTargets)
+Behaviors=(BehaviorName=FindPotentialFrostbiteTargets, NodeType=Selector, Child[0]=FindPotentialAoETargets-FrostbitePreferredProfile, Child[1]=FindPotentialAoETargets-FrostbiteSingleProfile)
+Behaviors=(BehaviorName=IsAbilityReady-KingBind, NodeType=Condition)
+Behaviors=(BehaviorName=TryKingBindOrGetOverHere, NodeType=Selector, Child[0]=TryKingBind, Child[1]=ConsiderTonguePullPriorityOrMelee, Child[2]=TryGetOverHere)
+Behaviors=(BehaviorName=TrySingletonFrostbite, NodeType=Sequence, Child[0]=IsAbilityAvailable-Frostbite, Child[1]=MultipleValidTargetsRemain, Child[2]=FindPotentialAoETargets-FrostbiteSingleProfile, Child[3]=SelectAoETarget-FrostbiteSingleProfile, Child[4]=SelectAbility-Frostbite)
+Behaviors=(BehaviorName=MultipleValidTargetsRemain, NodeType=DLC2Condition) ;Avoid using non-damaging debilitating abilities when only one target is left.
+Behaviors=(BehaviorName=IsAbilityAvailable-Frostbite, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Frostbite, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-FrostbitePreferredProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-FrostbitePreferredProfile, NodeType=Action)
+Behaviors=(BehaviorName=AffectedByEffect-Bind, NodeType=Condition)
+Behaviors=(BehaviorName=TryKingBind, NodeType=Sequence, Child[0]=IsAbilityAvailable-KingBind, Child[1]=SelectTargetForKingBind, Child[2]=SelectAbility-KingBind)
+Behaviors=(BehaviorName=IsAbilityAvailable-KingBind, NodeType=Condition)
+Behaviors=(BehaviorName=SelectTargetForKingBind, NodeType=Sequence, Child[0]=SetTargetStack-KingBind, Child[1]=SelectBestTargetForKingBind, Child[2]=HasValidTarget-KingBind)
+Behaviors=(BehaviorName=SelectAbility-KingBind, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-KingBind, NodeType=Condition)
+Behaviors=(BehaviorName=SetTargetStack-KingBind, NodeType=Action)
+Behaviors=(BehaviorName=SelectBestTargetForKingBind, NodeType=RepeatUntilFail, Child[0]=EvaluatePotentialMeleeTarget)
+Behaviors=(BehaviorName=FindPotentialAoETargets-FrostbiteSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-FrostbiteSingleProfile, NodeType=Action)
+Behaviors=(BehaviorName="ViperKing::AttackMimicBeacon", NodeType=Selector, Child[0]=TryStandardShotOnMimicBeacon, Child[1]=NeedsReload )

; ---------------- Berserker Queen Behavior -----------------------------------
+Behaviors=(BehaviorName="BerserkerQueen::CharacterRoot", NodeType=Selector, Child[0]=TryJobUnsafe, Child[1]=GenericGreenMovement, Child[2]=BerserkerMeleeRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName="BerserkerQueen::RulerBranch", NodeType=Selector,			\\
							Child[0]=SkipPerEffects,				\\
							Child[1]=RulerUnrevealedBehavior,		\\
							Child[2]=RulerEscape,					\\
							Child[3]=RulerPrimaryAoEAttack,			\\
							Child[4]=BerserkerQueenPriorityMove,	\\
							Child[5]="::RulerSecondSpecialAbility", \\
							Child[6]="::RulerOtherAttack",			\\
							Child[7]="::RulerMove")

+Behaviors=(BehaviorName="BerserkerQueen::RulerDisableAoE", NodeType=Sequence, Child[0]="::HasPotentialAoETarget", Child[1]=SelectAoETarget-QuakeProfile, Child[2]=SelectAbility-Quake)
+Behaviors=(BehaviorName="BerserkerQueen::RulerSecondSpecialAbility", NodeType=Sequence, Child[0]=IsAbilityAvailable-Faithbreaker, Child[1]=HasDamagedVisibleEnemies, Child[2]=MultipleValidTargetsRemain, Child[3]=SelectAbility-Faithbreaker)
+Behaviors=(BehaviorName="BerserkerQueen::RulerMove", NodeType=Selector, Child[0]=TryMoveTowardMeleeTarget, Child[1]=MoveToAlertDataNoCover, Child[2]=HuntEnemyUnsafe, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName="BerserkerQueen::HasPotentialAoETarget", NodeType=Sequence, Child[0]=IsAbilityAvailable-Quake, Child[1]=FindPotentialAoETargets-QuakeProfile)
+Behaviors=(BehaviorName=BerserkerQueenPriorityMove, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=MoveCloserToAoETarget)
+Behaviors=(BehaviorName="BerserkerQueen::RulerOtherAttack", NodeType=Selector, Child[0]="::RulerDisableAoE", Child[1]=DistributedMeleeAttackOrShot)
+Behaviors=(BehaviorName=DistributedMeleeAttackOrShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMelee, Child[1]=SelectPotentialMeleeTarget, Child[2]=MeleeOrMoveTowardsPotentialTarget)
+Behaviors=(BehaviorName=MeleeOrMoveTowardsPotentialTarget, NodeType=Selector, Child[0]=TryMeleePotentialTarget, Child[1]=RulerTryShootPriorityTarget, Child[2]=TryShootOrReload, Child[3]=MoveTowardsTopMeleeTarget)
+Behaviors=(BehaviorName=TryMeleePotentialTarget, NodeType=Sequence, Child[0]=SetTargetPotential-StandardMelee, Child[1]=HasValidTarget-StandardMelee, Child[2]=SelectAbility-StandardMelee)
+Behaviors=(BehaviorName=SetTargetPotential-StandardMelee, NodeType=Action); Set target of 'Potential' to the target of ability 'StandardMelee'.
+Behaviors=(BehaviorName=MoveTowardsTopMeleeTarget, NodeType=Sequence, Child[0]=FindDestinationAtOrTowardsMeleeTarget, Child[1]=HasValidDestination, Child[2]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindPotentialAoETargets-QuakeProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-QuakeProfile, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-Quake, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-Quake, NodeType=Action)

+Behaviors=(BehaviorName=IsAbilityAvailable-Faithbreaker, NodeType=Condition)
+Behaviors=(BehaviorName=HasDamagedVisibleEnemies, NodeType=DLC2Condition, Param[0]=2); Param[0]= Minimum visible enemies to succeed.
+Behaviors=(BehaviorName=SelectAbility-Faithbreaker, NodeType=Action)

+Behaviors=(BehaviorName=TryFlankingMove, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=TryFlankingMoveUnsafe)
+Behaviors=(BehaviorName=TryFlankingMoveUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=RestrictToFlanking, Child[3]=FindDestinationWithLoS-MWP_Aggressive, Child[4]=SelectAbility-StandardMove)
;Prevent BerserkerQueen from attacking teammates
+Behaviors=(BehaviorName="BerserkerQueen::CustomMeleeTargetScore", NodeType=Sequence, Child[0]=SSNegateClosestBonus, Child[1]=DistributeAttacksRuler, Child[2]=TargetScoreByScaledDistance-2, Child[3]=SSTargetScoreInvalidQueenDevastatingPunchTarget, Child[4]=TargetIsAlly, Child[5]=AddToTargetScore_-1000)
+Behaviors=(BehaviorName=TargetScoreByScaledDistance-2, NodeType=Action, Param[0]="-2"); Distance in Meters, Negated to favor closer units.
+Behaviors=(BehaviorName=SSNegateClosestBonus, NodeType=Successor, Child[0]=NegateClosestBonus)
+Behaviors=(BehaviorName=NegateClosestBonus, NodeType=Sequence, Child[0]=TargetIsClosestValidTarget, Child[1]=IsTargetInMovementRange-StandardMelee, Child[2]=AddToTargetScore_-100)
+Behaviors=(BehaviorName="ArchonKing::CustomMeleeTargetScore", NodeType=Sequence, Child[0]=DistributeAttacksRuler)
+Behaviors=(BehaviorName=TemplateNameIs-BerserkerQueen, NodeType=Condition)
+Behaviors=(BehaviorName=TemplateNameIs-ArchonKing, NodeType=Condition)
+Behaviors=(BehaviorName=TemplateNameIs-ViperKing, NodeType=Condition)

; Queen has attacks with movement components, so should check for melee attacks first
+Behaviors=(BehaviorName="BerserkerQueen::RulerMoveOrAttackMimicBeacon", NodeType=Selector, Child[0]="::AttackMimicBeacon", Child[1]=RulerMoveTowardMimicBeacon); If attack fails, just try moving closer.

; ---------------- Archon King Behavior -----------------------------------
+Behaviors=(BehaviorName="ArchonKing::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=ArchonRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName="ArchonKing::RulerBranch", NodeType=Selector,\\
							Child[0]=ContinueIcarusDropInProgress,	\\
							Child[1]=SkipPerEffects,				\\
							Child[2]=RulerUnrevealedBehavior,		\\
							Child[3]=RulerEscape,					\\
							Child[4]=RulerPrimaryAoEAttack,			\\
							Child[5]="::RulerSecondSpecialAbility", \\
							Child[6]=ArchonPriorityMovement,		\\
							Child[7]="::RulerOtherAttack",			\\
							Child[8]="::RulerMove")
+Behaviors=(BehaviorName=ContinueIcarusDropInProgress, NodeType=Sequence, Child[0]=AffectedByEffect-IcarusDropGrabberEffect, Child[1]=IsAbilityAvailable-IcarusDropSlam, Child[2]=SelectIcarusDropSlamTarget, Child[3]=SelectAbility-IcarusDropSlam)
+Behaviors=(BehaviorName=SelectIcarusDropSlamTarget, NodeType=Sequence, Child[0]=SetTargetStack-IcarusDropSlam, Child[1]=SelectSingletonTarget, Child[2]=HasValidTarget-IcarusDropSlam)
+Behaviors=(BehaviorName=SetTargetStack-IcarusDropSlam, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-IcarusDropSlam, NodeType=Condition)
+Behaviors=(BehaviorName=AffectedByEffect-IcarusDropGrabberEffect, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-IcarusDropSlam, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-IcarusDropSlam, NodeType=Action)
+Behaviors=(BehaviorName=ArchonPriorityMovement, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ChoosePriorityMovementOption)
+Behaviors=(BehaviorName=ChoosePriorityMovementOption, NodeType=Selector, Child[0]=MoveCloserToAoETarget, Child[1]=MoveCloserForIcarusDropAttack, Child[2]=OutOfRangeMoveEveryOtherAction, Child[3]=MoveIfNotNotOnGround)
+Behaviors=(BehaviorName="ArchonKing::HasPotentialAoETarget", NodeType=Sequence, Child[0]=IsAbilityAvailable-ArchonKingBlazingPinionsStage1, Child[1]=FindPotentialAoETargets-KingBlazingPinionsBasicProfile)
+Behaviors=(BehaviorName=RestrictToAbilityRange-ArchonKingBlazingPinionsStage1, NodeType=Action)
+Behaviors=(BehaviorName=MoveCloserForIcarusDropAttack, NodeType=Sequence, Child[0]=IsAbilityReady-IcarusDropGrab, Child[1]=MoveCloserToIcarusDropGrabTarget)
+Behaviors=(BehaviorName=IsAbilityReady-IcarusDropGrab, NodeType=Condition)
+Behaviors=(BehaviorName=OutOfRangeMoveEveryOtherAction, NodeType=Sequence, Child[0]=OutOfMeleeRange, Child[1]=TryMoveEveryOtherAction)
+Behaviors=(BehaviorName=OutOfMeleeRange, NodeType=Inverter, Child[0]=HasValidMeleeTarget)
+Behaviors=(BehaviorName=MoveIfNotNotOnGround, NodeType=Sequence, Child[0]=NotOnFloorTile, Child[1]=ForcePathToGround, Child[2]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=IsOnFloorTile, NodeType=DLC2Condition)
+Behaviors=(BehaviorName=ForcePathToGround, NodeType=DLC2Action)
+Behaviors=(BehaviorName=NotOnFloorTile, NodeType=Inverter, Child[0]=IsOnFloorTile)
+Behaviors=(BehaviorName=HasValidMeleeTarget, NodeType=Selector, Child[0]=HasValidIcarusDropTarget, Child[1]=HasValidStandardMeleeTarget)
+Behaviors=(BehaviorName=HasValidIcarusDropTarget, NodeType=Sequence, Child[0]=IsAbilityAvailable-IcarusDropGrab, Child[1]=SelectTargetForIcarusDrop)
+Behaviors=(BehaviorName=HasValidStandardMeleeTarget, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMelee, Child[1]=SetTargetStack-StandardMelee, Child[2]=SelectBestTargetForStandardMelee, Child[3]=HasValidTarget-StandardMelee)
+Behaviors=(BehaviorName="ArchonKing::RulerDisableAoE", NodeType=Sequence, Child[0]=IsOnFloorTile, Child[1]="::HasPotentialAoETarget", Child[2]=SelectAoETarget-KingBlazingPinionsBasicProfile, Child[3]=SelectAbility-ArchonKingBlazingPinionsStage1)
+Behaviors=(BehaviorName=IsAbilityAvailable-ArchonKingBlazingPinionsStage1, NodeType=Condition)
+Behaviors=(BehaviorName=FindPotentialAoETargets-KingBlazingPinionsBasicProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-KingBlazingPinionsBasicProfile, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-ArchonKingBlazingPinionsStage1, NodeType=Action)
+Behaviors=(BehaviorName="ArchonKing::RulerSecondSpecialAbility", NodeType=Sequence, Child[0]=IsAbilityAvailable-IcarusDropGrab, Child[1]=DidNotJustUseDevastate, Child[2]=MultipleValidTargetsRemain, Child[3]=SelectTargetForIcarusDrop, Child[4]=SelectAbility-IcarusDropGrab)
+Behaviors=(BehaviorName=IsAbilityAvailable-IcarusDropGrab, NodeType=Condition)
+Behaviors=(BehaviorName=DidNotJustUseDevastate, NodeType=Inverter, Child[0]=WasLastAbility-ArchonKingBlazingPinionsStage1)
+Behaviors=(BehaviorName=WasLastAbility-ArchonKingBlazingPinionsStage1, NodeType=Condition)
+Behaviors=(BehaviorName=SelectTargetForIcarusDrop, NodeType=Sequence, Child[0]=SetTargetStack-IcarusDropGrab, Child[1]=SelectBestTargetForIcarusDrop, Child[2]=HasValidTarget-IcarusDropGrab)
+Behaviors=(BehaviorName=SetTargetStack-IcarusDropGrab, NodeType=Action)
+Behaviors=(BehaviorName=HasValidTarget-IcarusDropGrab, NodeType=Condition)
+Behaviors=(BehaviorName=SelectBestTargetForIcarusDrop, NodeType=RepeatUntilFail, Child[0]=EvaluatePotentialMeleeTarget)
+Behaviors=(BehaviorName=SelectAbility-IcarusDropGrab, NodeType=Action)
+Behaviors=(BehaviorName="ArchonKing::RulerMove", NodeType=Selector, Child[0]=TryMoveTowardMeleeTarget, Child[1]=MoveToAlertDataNoCover, Child[2]=HuntEnemyUnsafe, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=TryMoveTowardMeleeTarget, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=SelectPotentialMeleeTarget, Child[2]=MoveTowardsTopMeleeTarget)
+Behaviors=(BehaviorName=FindDestinationAtOrTowardsMeleeTarget, NodeType=Selector, Child[0]=TryDestinationInMeleeRange, Child[1]=FindClosestPointToTarget-Potential)
+Behaviors=(BehaviorName=HasValidDestination, NodeType=DLC2Condition); Checks if destination is not our current tile location.
+Behaviors=(BehaviorName=TryDestinationInMeleeRange, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToPotentialTargetRange-StandardMelee, Child[2]=SetAbilityForFindDestination-StandardMelee, Child[3]=FindRestrictedDestination-MWP_MeleeFanatic)
+Behaviors=(BehaviorName=SetAbilityForFindDestination-StandardMelee, NodeType=Action) ; Specify weapon for melee movement.
+Behaviors=(BehaviorName=MoveToAlertDataNoCover, NodeType=Sequence, Child[0]=SetAlertDataStack, Child[1]=GenericSelectBestAlert, Child[2]=HasValidAlertDataLocation, Child[3]=TakeAlertMoveWithoutCoverUnsafe)

; -------------------- Neonate Viper --------------------------------------------------
+Behaviors=(BehaviorName="ViperNeonate::CharacterRoot", NodeType=Selector, Child[0]=TryJob, Child[1]=GenericGreenMovement, Child[2]=ViperNeonateRedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName="ViperNeonate::MoveTowardMimicBeacon", NodeType=Selector, Child[0]=TryMeleeMoveTowardMimicBeacon, Child[1]=TryStandardMoveTowardMimicBeacon)
+Behaviors=(BehaviorName="ViperNeonate::CustomMeleeTargetScore", NodeType=Sequence, Child[0]=TargetNotValidForBind, Child[1]=AddToTargetScore_-1000) ;Overwrite option for melee abilities that are restricted.

+Behaviors=(BehaviorName=ViperNeonateRedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=ViperNeonateRedAbilitySelector)
+Behaviors=(BehaviorName=ViperNeonateRedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=ViperNeonateRedFirstAction, Child[2]=ViperNeonateRedLastAction)

+Behaviors=(BehaviorName=ViperNeonateRedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=ViperNeonateRedFirstActionSelector)
+Behaviors=(BehaviorName=ViperNeonateRedFirstActionSelector, NodeType=Selector, \\
	Child[0]=TryStandardMelee, \\
	Child[1]=SelectMoveStandard, \\
	Child[2]=TryShootOrReloadOrOverwatch, \\
	Child[3]=HuntEnemyWithCover)

+Behaviors=(BehaviorName=ViperNeonateRedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=ViperNeonateRedLastActionSelector)
+Behaviors=(BehaviorName=ViperNeonateRedLastActionSelector, NodeType=Selector, \\
	Child[0]=TryStandardMelee, \\
	Child[1]=TryShootOrReloadOrOverwatch, \\
	Child[2]=DoIfFlankedMove, \\
	Child[3]=HuntEnemyWithCover, \\
	Child[4]=SelectMoveStandard)

; -------------------- Base Archon modifications around Archon King--------------------------------------------------
; Archons avoid using Blazing Pinions when the Archon King is active.
-Behaviors=(BehaviorName=TryMoveForBlazingPinions, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-BlazingPinionsStage1, Child[2]=FindPotentialAoETargets-BlazingPinionsBasicProfile, Child[3]=MoveStandardIfFirstAbility-BlazingPinions)
+Behaviors=(BehaviorName=TryMoveForBlazingPinions, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=IsAbilityReady-BlazingPinionsStage1, Child[2]=ArchonKingNotAround, Child[3]=FindPotentialAoETargets-BlazingPinionsBasicProfile, Child[4]=MoveStandardIfFirstAbility-BlazingPinions)
-Behaviors=(BehaviorName=TryBlazingPinions, NodeType=Sequence, Child[0]=IsAbilityAvailable-BlazingPinionsStage1, Child[1]=FindPotentialAoETargets-BlazingPinionsBasicProfile, Child[2]=SelectAoETarget-BlazingPinionsBasicProfile, Child[3]=SelectAbility-BlazingPinionsStage1)
+Behaviors=(BehaviorName=TryBlazingPinions, NodeType=Sequence, Child[0]=IsAbilityAvailable-BlazingPinionsStage1, Child[1]=ArchonKingNotAround, Child[2]=FindPotentialAoETargets-BlazingPinionsBasicProfile, Child[3]=SelectAoETarget-BlazingPinionsBasicProfile, Child[4]=SelectAbility-BlazingPinionsStage1)
+Behaviors=(BehaviorName=ArchonKingNotAround, NodeType=Inverter, Child[0]=IsArchonKingActive)
+Behaviors=(BehaviorName=IsArchonKingActive, NodeType=DLC2Condition)

; Updates to Archon King
+Behaviors=(BehaviorName=MoveCloserToIcarusDropGrabTarget, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=FindIcarusDropDestination, Child[2]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindIcarusDropDestination, NodeType=Sequence, Child[0]=SelectPotentialTargetForIcarusDrop, Child[1]=RestrictToPotentialTargetRange-StandardMelee, Child[2]=FindRestrictedDestination-MWP_Melee)
+Behaviors=(BehaviorName=SelectPotentialTargetForIcarusDrop, NodeType=Sequence, Child[0]=SetPotentialTargetStack, Child[1]=SelectBestPotentialTargetForIcarusDrop, Child[2]=HasValidTarget-Potential)
+Behaviors=(BehaviorName=SelectBestPotentialTargetForIcarusDrop, NodeType=RepeatUntilFail, Child[0]=EvaluatePotentialIcarusDropTarget)
+Behaviors=(BehaviorName=EvaluatePotentialIcarusDropTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=TargetScoreClosestIfInRange, Child[2]=AvoidBoundAndPanickedTargets, Child[3]=SSTargetScoreInvalidIcarusDropTargets, Child[4]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSTargetScoreInvalidIcarusDropTargets, NodeType=Successor, Child[0]=TargetScoreInvalidIcarusDropTargets)
+Behaviors=(BehaviorName=TargetScoreInvalidIcarusDropTargets, NodeType=Sequence, Child[0]=IsInvalidIcarusDropTarget, Child[1]=AddToTargetScore_-1000) 
+Behaviors=(BehaviorName=IsInvalidIcarusDropTarget, NodeType=Inverter, Child[0]=TargetValidForAbility-IcarusDropGrab)
+Behaviors=(BehaviorName=TargetValidForAbility-IcarusDropGrab, NodeType=Condition, Param[0]=AA_NotInRange) ;Params are exceptions to ignore.

; Updates to Berserker Queen
+Behaviors=(BehaviorName=SSTargetScoreInvalidQueenDevastatingPunchTarget, NodeType=Successor, Child[0]=TargetScoreInvalidQueenDevastatingPunchTarget)
+Behaviors=(BehaviorName=TargetScoreInvalidQueenDevastatingPunchTarget, NodeType=Sequence, Child[0]=IsInvalidQueenDevastatingPunchTarget, Child[1]=AddToTargetScore_-1000)
+Behaviors=(BehaviorName=TargetValidForAbility-QueenDevastatingPunch, NodeType=Condition, Param[0]=AA_NotInRange) ;Params are exceptions to ignore.
+Behaviors=(BehaviorName=IsInvalidQueenDevastatingPunchTarget, NodeType=Inverter, Child[0]=TargetValidForAbility-QueenDevastatingPunch)
