[XComGame.XComGameState_AIGroup]
; Prevent FeralMEC units from falling back to another group.
+FallbackExclusionList="FeralMEC_M1"
+FallbackExclusionList="FeralMEC_M2"
+FallbackExclusionList="FeralMEC_M3"

[XComGame.XGAIPlayer]
; Don't bother attacking someone who's already being attacked with Suppression.
+LastResortTargetEffects=(EffectName="Suppression")

[XComGame.XGAIBehavior]
; Multiple profiles because we prefer reachable targets over unreachable targets.  If unreachable, go for anything.
+AoEProfiles=( Profile=SelfDestructProfilePreferred, Ability=TriggerSelfDestruct, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, bPathToTarget=true, MinTargets=1)
+AoEProfiles=( Profile=SelfDestructProfileAny, Ability=TriggerSelfDestruct, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, MinTargets=1)

[XComGame.X2AIBTBehaviorTree]
; new NodeType specifiers defined here.  i.e. NodeType=DLC3Conditions, defined in class X2AIBT_DLC_2Conditions
+CustomNodes=(NodeTypeString="DLC3Condition", ExtendsFromType="Condition", ClassName="DLC_3.X2AIBT_DLC_90Conditions")
+CustomNodes=(NodeTypeString="DLC3Action", ExtendsFromType="Action", ClassName="DLC_3.X2AIBT_DLC_90Actions")

;Feral MECs don't do jobs or patrolling.
+Behaviors=(BehaviorName="FeralMEC::CharacterRoot", NodeType=Selector, Child[0]=SkipIfUnrevealed, Child[1]=TryOverloadBranch, Child[2]=FeralMECMk2RedAlert, Child[3]=GenericAlertHandler)
+Behaviors=(BehaviorName=SkipIfUnrevealed, NodeType=Sequence, Child[0]=NotYetRevealed, Child[1]=SkipMove)
;Overload behavior.
+Behaviors=(BehaviorName=TryOverloadBranch, NodeType=Sequence, Child[0]=ShouldMoveForOverload, Child[1]=OverloadBranch)
+Behaviors=(BehaviorName=OverloadBranch, NodeType=Selector, Child[0]=SelfDestructJustPrimed, Child[1]=ExplodeIfPrimed, Child[2]=OverloadMoveIfFirstAction, Child[3]=TryPrimeSelfDestruct)
+Behaviors=(BehaviorName=OverloadMoveIfFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=OverloadMove)
+Behaviors=(BehaviorName=FeralMECMk2RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=FeralMECMk2RedAbilitySelector)
+Behaviors=(BehaviorName=FeralMECMk2RedAbilitySelector, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=FeralMECMk2RedFirstAction, Child[2]=FeralMECMk2RedLastAction)

+Behaviors=(BehaviorName=FeralMECMk2RedFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=FeralMECMk2FirstActionSelector)
+Behaviors=(BehaviorName=FeralMECMk2FirstActionSelector, NodeType=Selector, \\
	Child[0]=MoveNoCover, \\
	Child[1]=HuntEnemy, \\
	Child[2]=TryShootOrReloadOrOverwatch)

+Behaviors=(BehaviorName=FeralMECMk2RedLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=FeralMECMk2RedLastActionSelector)
+Behaviors=(BehaviorName=FeralMECMk2RedLastActionSelector, NodeType=Selector, \\
	Child[0]=FeralMecShootOrSuppress, \\
	Child[1]=HuntEnemy, \\
	Child[2]=MoveNoCover, \\
	Child[3]=TryShootOrReloadOrOverwatch)

+Behaviors=(BehaviorName=FeralMECShootOrSuppress, NodeType=Selector, Child[0]=ChanceToSuppressOverloadTarget, Child[1]=TryShootOrReloadOrOverwatch)
+Behaviors=(BehaviorName=ChanceToSuppressOverloadTarget, NodeType=RandFilter, Child[0]=SuppressOverloadTarget, Param[0]=65) ;Specify % chance to suppress overload target here.
+Behaviors=(BehaviorName=SuppressOverloadTarget, NodeType=Sequence, Child[0]=NoTeammateSuppressors, Child[1]=HasOverloaderTeammate, Child[2]=IsAbilityAvailable-Suppression, Child[3]=SelectOverloadTargetForSuppression, Child[4]=SelectAbility-Suppression)
+Behaviors=(BehaviorName=SelectOverloadTargetForSuppression, NodeType=Sequence, Child[0]=SetTargetStack-Suppression, Child[1]=SelectBestOverloadSuppressionTarget, Child[2]=HasValidTarget-Suppression)
+Behaviors=(BehaviorName=SelectBestOverloadSuppressionTarget, NodeType=RepeatUntilFail, Child[0]=EvaluateOverloadSuppressionTarget)
+Behaviors=(BehaviorName=EvaluateOverloadSuppressionTarget, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreIfPossibleOverloadTarget, Child[2]=SSScoreUnsuppressedByHitChanceValue, Child[3]=TargetScoreInvalidateCivilians, Child[4]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreIfPossibleOverloadTarget, NodeType=Successor, Child[0]=ScoreIfPossibleOverloadTarget)
+Behaviors=(BehaviorName=ScoreIfPossibleOverloadTarget, NodeType=Sequence, Child[0]=TargetIsNotSuppressed, Child[1]=ScoreTargetForOverload)
+Behaviors=(BehaviorName=ScoreTargetForOverload, NodeType=DLC3Action, Param[0]="-10"); Distance in Meters, Negated to favor closer units.)
+Behaviors=(BehaviorName=HasOverloaderTeammate, NodeType=DLC3Condition)

; Overload has two parts - EngageSelfDestruct primes the ability, and TriggerSelfDestruct makes it go boom.
+Behaviors=(BehaviorName=ShouldMoveForOverload, NodeType=Selector, Child[0]=IsAbilityAvailable-TriggerSelfDestruct, Child[1]=ShouldUseOverload)
+Behaviors=(BehaviorName=OverloadMove, NodeType=Sequence, Child[0]=SelectOverloadDestination, Child[1]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=ExplodeIfPrimed, NodeType=Sequence, Child[0]=IsAbilityAvailable-TriggerSelfDestruct, Child[1]=SSFindSelfDestructDestination, Child[2]=SelectAbility-TriggerSelfDestruct)
+Behaviors=(BehaviorName=IsAbilityAvailable-TriggerSelfDestruct, NodeType=Condition)
+Behaviors=(BehaviorName=SelectAbility-TriggerSelfDestruct, NodeType=Action)
+Behaviors=(BehaviorName=TryPrimeSelfDestruct, NodeType=Sequence, Child[0]=IsAbilityAvailable-EngageSelfDestruct, Child[1]=ShouldUseOverload, Child[2]=SelectOverloadDestination, Child[3]=SelectAbility-EngageSelfDestruct)
+Behaviors=(BehaviorName=IsAbilityAvailable-EngageSelfDestruct, NodeType=Condition)
+Behaviors=(BehaviorName=SelectOverloadDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=FindPotentialSelfDestructTargets, Child[2]=FindDestinationTowardsSelfDestructTargets)
+Behaviors=(BehaviorName=SelectAbility-EngageSelfDestruct, NodeType=Action)
+Behaviors=(BehaviorName=FindDestinationTowardsSelfDestructTargets, NodeType=DLC3Action)

+Behaviors=(BehaviorName=ShouldUseOverload, NodeType=Sequence, Child[0]=CanAIUseOverload, Child[1]=InitOverloadVar, Child[2]=IsSetToOverload)
+Behaviors=(BehaviorName=CanAIUseOverload, NodeType=DLC3Condition)
+Behaviors=(BehaviorName=InitOverloadVar, NodeType=Selector, Child[0]=OverloadInitUnnecessary, Child[1]=UpdateOverloadVar)
+Behaviors=(BehaviorName=OverloadInitUnnecessary, NodeType=Sequence, Child[0]=HasBTVar-ShouldOverload, Child[1]=HasOverloaderTeammate)
+Behaviors=(BehaviorName=HasBTVar-ShouldOverload, NodeType=Condition)
+Behaviors=(BehaviorName=UpdateOverloadVar, NodeType=DLC3Condition)
+Behaviors=(BehaviorName=IsSetToOverload, NodeType=StatCondition, Param[0]=BTVar, Param[1]="!=", Param[2]="0", Param[3]="ShouldOverload")

+Behaviors=(BehaviorName=HasSelfDestructTargets, NodeType=Sequence, Child[0]=ShouldMoveForOverload, Child[1]=FindPotentialSelfDestructTargets)
+Behaviors=(BehaviorName=FindPotentialAoETargets-SelfDestructProfilePreferred, NodeType=Action)
+Behaviors=(BehaviorName=FindPotentialAoETargets-SelfDestructProfileAny, NodeType=Action)
+Behaviors=(BehaviorName=SSFindSelfDestructDestination, NodeType=Successor, Child[0]=FindSelfDestructDestination)
+Behaviors=(BehaviorName=FindSelfDestructDestination, NodeType=Sequence, Child[0]=HasSelfDestructTargets, Child[1]=SelectSelfDestructTarget)
+Behaviors=(BehaviorName=FindPotentialSelfDestructTargets, NodeType=Selector, Child[0]=FindPotentialAoETargets-SelfDestructProfilePreferred, Child[1]=FindPotentialAoETargets-SelfDestructProfileAny)
+Behaviors=(BehaviorName=SelectSelfDestructTarget, NodeType=Selector, Child[0]=SelectAoETarget-SelfDestructProfilePreferred, Child[1]=SelectAoETarget-SelfDestructProfileAny)
+Behaviors=(BehaviorName=SelectAoETarget-SelfDestructProfilePreferred, NodeType=Action)
+Behaviors=(BehaviorName=SelectAoETarget-SelfDestructProfileAny, NodeType=Action)

+Behaviors=(BehaviorName=AffectedByEffect-SparkSelfDestructEffect, NodeType=Condition)
+Behaviors=(BehaviorName=SelfDestructJustPrimed, NodeType=Sequence, Child[0]=AffectedByEffect-SparkSelfDestructEffect, Child[1]=IsLastActionPoint, Child[2]=WasLastAbility-EngageSelfDestruct, Child[3]=SkipMove); End turn once we select EngageSelfDestruct.
+Behaviors=(BehaviorName=WasLastAbility-EngageSelfDestruct, NodeType=Condition)

; Lost Towers Turret AI.
;  Differences from base turret: Overwatch 50% of the time.  
+Behaviors=(BehaviorName=LostTowersTurretRoot, NodeType=Selector, Child[0]=TryNonAggressiveBehavior, Child[1]=TryMindControlledRoot, Child[2]=LostTowersTurretCharacterRoot, Child[3]=SkipMove)
+Behaviors=(BehaviorName=LostTowersTurretCharacterRoot, NodeType=Selector, Child[0]=LostTowersTurret_RedAlert, Child[1]=SkipMove)
+Behaviors=(BehaviorName=LostTowersTurret_RedAlert, NodeType=Sequence, Child[0]=IsRedAlert, Child[1]=LostTowersTurretRedAbilitySelector)
+Behaviors=(BehaviorName=LostTowersTurretRedAbilitySelector, NodeType=Selector, \\
	Child[0]=MimicBeaconBehavior, \\
	Child[1]=LostTowersTurretRedFirstActionSelector)

+Behaviors=(BehaviorName=LostTowersTurretRedFirstActionSelector, NodeType=Sequence, \\
	Child[0]=NotLastActionPoint, \\
	Child[1]=LostTowersTurret_TryShootOverwatchOrReload)

+Behaviors=(BehaviorName=LostTowersTurret_TryShootOverwatchOrReload, NodeType=Selector, Child[0]=RandOverwatch50_15, Child[1]=ShootIfAvailable, Child[2]=NeedsReload)
+Behaviors=(BehaviorName=RandOverwatch50_15, NodeType=Selector, Child[0]=RandFirstOverwatch50, Child[1]=RandSecondOverwatch15)
+Behaviors=(BehaviorName=RandFirstOverwatch50, NodeType=Sequence, Child[0]=NoOverwatchingTeammates, Child[1]=RandOverwatch50)
+Behaviors=(BehaviorName="AdventTurret::TargetEvaluation", NodeType=Sequence, Child[0]=TargetScoreHitChance, Child[1]=GenericScoreTargetRandomly, Child[2]=TargetScoreInvalidateCivilians, Child[3]=TargetScoreInvalidatePriorityObject)

; Julian AI, a stripped down sectopod behavior tree.
+Behaviors=(BehaviorName=JulianSectopodRoot, NodeType=Selector, Child[0]=TryNonAggressiveBehavior, Child[1]=TryMindControlledRoot, Child[2]=JulianCharacterRoot, Child[3]=SkipMove)
+Behaviors=(BehaviorName=JulianCharacterRoot, NodeType=Selector, Child[0]=MimicBeaconBehavior, Child[1]=JulianFirstAction, Child[2]=JulianSecondAction, Child[3]=JulianLastAction)
+Behaviors=(BehaviorName=JulianFirstAction, NodeType=Sequence, Child[0]=HasThreeActionPoints, Child[1]=JulianFirstActionSelector)
+Behaviors=(BehaviorName=JulianFirstActionSelector, NodeType=Selector,\\
	Child[0]=TryStandUp,\\
	Child[1]=TryFirstMoveTowardVisibleEnemies50, \\
	Child[2]=ShootIfAvailable, \\
	Child[3]=MoveNoCover, \\
	Child[4]=TryShootOrReloadOrOverwatch, \\
	Child[5]=HuntEnemy)
+Behaviors=(BehaviorName=JulianSecondAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=JulianSecondActionSelector)
+Behaviors=(BehaviorName=JulianSecondActionSelector, NodeType=Selector,\\
	Child[0]=TryStandUp,\\
	Child[1]=TryMoveTowardVisibleEnemies50, \\
	Child[2]=MoveNoCoverIfNotMoved, \\
	Child[3]=TryShootOrReloadOrOverwatch, \\
	Child[4]=HuntEnemy)
+Behaviors=(BehaviorName=JulianLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=JulianLastActionSelector)
+Behaviors=(BehaviorName=JulianLastActionSelector, NodeType=Selector, \\
	Child[0]=TryShootOrReloadOrOverwatch, \\
	Child[1]=HuntEnemy)

; No Teammate Suppressors, limits max 1 suppressor per turn.
+Behaviors=(BehaviorName=NoTeammateSuppressors, NodeType=DLC3Condition)

; DLC3 to disable specific abilities from being used against sacrifice-affected targets.  
; SetTargetStack-XXX nodes must be modified here to go through the new code path to check the ability against Sacrifice.
;  Also require special handling for melee abilities that use the generic melee nodes.
; Ability names must also be listed in XComGameData_SoldierSkills under AbilitiesDisableForAI array.
-Behaviors=(BehaviorName=SetTargetStack-StandardMelee, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-StandardMelee, NodeType=DLC3Action)
-Behaviors=(BehaviorName=SetTargetStack-Bind, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-Bind, NodeType=DLC3Action)
-Behaviors=(BehaviorName=SetTargetStack-AnimaConsume, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-AnimaConsume, NodeType=DLC3Action)
-Behaviors=(BehaviorName=SetTargetStack-Suppression, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-Suppression, NodeType=DLC3Action)
-Behaviors=(BehaviorName=IsInvalidTonguePullTarget, NodeType=Selector, Child[0]=TargetAffectedByEffect-Suppression, Child[1]=TargetIsApplyingEffect-Suppression);
+Behaviors=(BehaviorName=IsInvalidTonguePullTarget, NodeType=Selector, Child[0]=TargetAffectedByEffect-Suppression, Child[1]=TargetIsApplyingEffect-Suppression, Child[2]=TargetAffectedByEffect-DLC_3SacrificeShield);
+Behaviors=(BehaviorName=TargetAffectedByEffect-DLC_3SacrificeShield, NodeType=Condition)
-Behaviors=(BehaviorName=TargetNotValidForBind, NodeType=Selector, Child[0]=TargetIsAlien, Child[1]=TargetIsRobotic)
+Behaviors=(BehaviorName=TargetNotValidForBind, NodeType=Selector, Child[0]=TargetIsAlien, Child[1]=TargetIsRobotic, Child[2]=TargetAffectedByEffect-DLC_3SacrificeShield)
+Behaviors=(BehaviorName="Gatekeeper::CustomMeleeTargetScore", NodeType=Sequence, Child[0]=TargetAffectedByEffect-DLC_3SacrificeShield, Child[1]=AddToTargetScore_-1000)
; DLC_2 overrides
-Behaviors=(BehaviorName=SetTargetStack-KingBind, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-KingBind, NodeType=DLC3Action)
-Behaviors=(BehaviorName=SetTargetStack-IcarusDropGrab, NodeType=Action)
+Behaviors=(BehaviorName=SetTargetStack-IcarusDropGrab, NodeType=DLC3Action)
-Behaviors=(BehaviorName="ArchonKing::CustomMeleeTargetScore", NodeType=Sequence, Child[0]=DistributeAttacksRuler)
+Behaviors=(BehaviorName="ArchonKing::CustomMeleeTargetScore", NodeType=Sequence, Child[0]=DistributeAttacksRuler, Child[1]=TargetAffectedByEffect-DLC_3SacrificeShield, Child[2]=AddToTargetScore_-1000 )
-Behaviors=(BehaviorName=IsAbilityReady-IcarusDropGrab, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityReady-IcarusDropGrab, NodeType=DLC3Condition)

