//---------------------------------------------------------------------------------------
//  FILE:    X2StrategyElement_XpackDarkEvents.uc
//  AUTHOR:  Joe Weinhoffer
//           
//---------------------------------------------------------------------------------------
//  Copyright (c) 2016 Firaxis Games, Inc. All rights reserved.
//---------------------------------------------------------------------------------------
class X2StrategyElement_XpackDarkEvents extends X2StrategyElement_DefaultDarkEvents
	config(GameData);

var config array<int> SignalJammingHours;
var config array<float> SignalJammingIncrease;
var config int STILETTO_BLEEDING_NUM_TURNS;
var config int STILETTO_BLEEDING_TICK_DMG;
var config int STILETTO_ROUNDS_CHANCE;
var config array<float> WildHuntScalar;
var config array<float> KnowledgeGainPercent;

var localized string HighAlertFlyoverText;

//---------------------------------------------------------------------------------------
static function array<X2DataTemplate> CreateTemplates()
{
	local array<X2DataTemplate> DarkEvents;

	DarkEvents.AddItem(CreateSignalJammingTemplate());
	DarkEvents.AddItem(CreateTheCollectorsTemplate());
	DarkEvents.AddItem(CreateStilettoRoundsTemplate());
	DarkEvents.AddItem(CreateLightningReflexesTemplate());
	DarkEvents.AddItem(CreateReturnFireTemplate());
	DarkEvents.AddItem(CreateBendingReedTemplate());
	DarkEvents.AddItem(CreateSealedArmorTemplate());
	DarkEvents.AddItem(CreateUndyingLoyaltyTemplate());
	DarkEvents.AddItem(CreateBarrierTemplate());
	DarkEvents.AddItem(CreateHighAlertTemplate());
	DarkEvents.AddItem(CreateDarkTowerTemplate());
	DarkEvents.AddItem(CreateLostWorldTemplate());
	DarkEvents.AddItem(CreateCounterattackEventTemplate());
	DarkEvents.AddItem(CreateCollateralDamageTemplate());
	DarkEvents.AddItem(CreateSpiderAndFlyTemplate());
	DarkEvents.AddItem(CreateLeftBehindTemplate());
	DarkEvents.AddItem(CreateGoneToGroundTemplate());
	DarkEvents.AddItem(CreateMadeWholeTemplate());
	DarkEvents.AddItem(CreateWildHuntTemplate());
	DarkEvents.AddItem(CreateLoyaltyAmongThievesAssassinTemplate());
	DarkEvents.AddItem(CreateLoyaltyAmongThievesHunterTemplate());
	DarkEvents.AddItem(CreateLoyaltyAmongThievesWarlockTemplate());

	return DarkEvents;
}

//---------------------------------------------------------------------------------------
static function X2DataTemplate CreateSignalJammingTemplate()
{
	local X2DarkEventTemplate Template;

	`CREATE_X2TEMPLATE(class'X2DarkEventTemplate', Template, 'DarkEvent_SignalJamming');
	Template.Category = "DarkEvent";
//BEGIN AUTOGENERATED CODE: Template Overrides 'DarkEvent_SignalJamming'
	Template.ImagePath = "img:///UILibrary_XPACK_StrategyImages.DarkEvent_Signal_Jamming";
//END AUTOGENERATED CODE: Template Overrides 'DarkEvent_SignalJamming'
	Template.bRepeatable = false;
	Template.bTactical = false;
	Template.bLastsUntilNextSupplyDrop = false;
	Template.MaxSuccesses = 0;
	Template.MinActivationDays = 21;
	Template.MaxActivationDays = 35;
	Template.MinDurationDays = 38;
	Template.MaxDurationDays = 45;
	Template.bInfiniteDuration = false;
	Template.StartingWeight = 5;
	Template.MinWeight = 1;
	Template.MaxWeight = 5;
	Template.WeightDeltaPerPlay = -2;
	Template.WeightDeltaPerActivate = 0;

	Template.OnActivatedFn = ActivateSignalJamming;

	return Template;
}

//---------------------------------------------------------------------------------------
static function ActivateSignalJamming(XComGameState NewGameState, StateObjectReference InRef, optional bool bReactivate = false)
{
	local XComGameState_HeadquartersXCom XComHQ;

	XComHQ = GetAndAddXComHQ(NewGameState);
	XComHQ.SetScanRateForDuration(NewGameState, GetSignalJammingIncrease(), GetSignalJammingHours());
}

//---------------------------------------------------------------------------------------
static function X2DataTemplate CreateTheCollectorsTemplate()
{
	local X2DarkEventTemplate Template;

	`CREATE_X2TEMPLATE(class'X2DarkEventTemplate', Template, 'DarkEvent_TheCollectors');
	Template.Category = "DarkEvent";
	Template.ImagePath = "img:///UILibrary_XPACK_StrategyImages.DarkEvent_The_Collectors";
	Template.bRepeatable = true;
	Template.bTactical = true;
	Template.bLastsUntilNextSupplyDrop = false;
	Template.MaxSuccesses = 0;
	Template.MinActivationDays = 21;
	Template.MaxActivationDays = 35;
	Template.MinDurationDays = 28;
	Template.MaxDurationDays = 28;
	Template.bInfiniteDuration = false;
	Template.StartingWeight = 5;
	Template.MinWeight = 1;
	Template.MaxWeight = 5;
	Template.WeightDeltaPerPlay = -2;
	Template.WeightDeltaPerActivate = 0;

	Template.OnActivatedFn = ActivateTheCollectors;
	Template.OnDeactivatedFn = DeactivateTheCollectors;

	return Template;
}

//---------------------------------------------------------------------------------------
static function ActivateTheCollectors(XComGameState NewGameState, StateObjectReference InRef, optional bool bReactivate = false)
{
	local XComGameState_HeadquartersAlien AlienHQ;

	AlienHQ = GetAndAddAlienHQ(NewGameState);
	AlienHQ.bChosenCapture = true;
}

//---------------------------------------------------------------------------------------
static function DeactivateTheCollectors(XComGameState NewGameState, StateObjectReference InRef)
{
	local XComGameState_HeadquartersAlien AlienHQ;

	AlienHQ = GetAndAddAlienHQ(NewGameState);
	AlienHQ.bChosenCapture = false;
}

//---------------------------------------------------------------------------------------
static function X2DataTemplate CreateStilettoRoundsTemplate()
{
	local X2DarkEventTemplate Template;

	`CREATE_X2TEMPLATE(class'X2DarkEventTemplate', Template, 'DarkEvent_StilettoRounds');
	Template.Category = "DarkEvent";
	Template.ImagePath = "img:///UILibrary_XPACK_StrategyImages.DarkEvent_Stiletto_Rounds";
	Template.bRepeatable = true;
	Template.bTactical = true;
	Template.bLastsUntilNextSupplyDrop = false;
	Template.MaxSuccesses = 0;
	Template.MinActivationDays = 21;
	Template.MaxActivationDays = 35;
	Template.MinDurationDays = 28;
	Template.MaxDurationDays = 28;
	Template.bInfiniteDuration = false;
	Template.StartingWeight = 5;
	Template.MinWeight = 1;
	Template.MaxWeight = 5;
	Template.WeightDeltaPerPlay = -2;
	Template.WeightDeltaPerActivate = 0;

	Template.OnActivatedFn = ActivateStilettoRounds;
	Template.OnDeactivatedFn = DeactivateStilettoRounds;

	return Template;
}

//---------------------------------------------------------------------------------------
static function ActivateStilettoRounds(XComGameState NewGameState, StateObjectReference InRef, optional bool bReactivate = false)
{
	local XComGameState_HeadquartersAlien AlienHQ;

	AlienHQ = GetAndAddAlienHQ(NewGameState);
	AlienHQ.bStilettoRounds = true;
}

//---------------------------------------------------------------------------------------
static function DeactivateStilettoRounds(XComGameState NewGameState, StateObjectReference InRef)
{
	local XComGameState_HeadquartersAlien AlienHQ;

	AlienHQ = GetAndAddAlienHQ(NewGameState);
	AlienHQ.bStilettoRounds = false;
}

// Stiletto Rounds (bleeding) are added as an effect applied to any standard shots or overwatch shots as long as the shooter has the Stiletto Rounds effect.
//---------------------------------------------------------------------------------------
static function AddStilettoRoundsEffect(out X2AbilityTemplate AbilityTemplate)
{
	local X2Effect_Persistent BleedingEffect;
	local X2Condition_UnitEffectsOnSource StilettoRoundsEffect;
	BleedingEffect = class'X2StatusEffects'.static.CreateBleedingStatusEffect(default.STILETTO_BLEEDING_NUM_TURNS, default.STILETTO_BLEEDING_TICK_DMG);

	// Only add the bleeding effect if the shooter has the stiletto rounds effect
	StilettoRoundsEffect = new class'X2Condition_UnitEffectsOnSource';
	StilettoRoundsEffect.AddRequireEffect('AdventStilettoRoundsEffect', 'AA_MissingRequiredEffect');
	BleedingEffect.TargetConditions.AddItem(StilettoRoundsEffect);
	
	AbilityTemplate.AddTargetEffect(BleedingEffect);
}


//---------------------------------------------------------------------------------------
static function X2DataTemplate CreateLightningReflexesTemplate()
{
	local X2DarkEventTemplate Template;

	`CREATE_X2TEMPLATE(class'X2DarkEventTemplate', Template, 'DarkEvent_LightningReflexes');
	Template.Category = "DarkEvent";
	Template.ImagePath = "img:///UILibrary_XPACK_StrategyImages.DarkEvent_Lightning_Reflexes";
	Template.bRepeatable = false;
	Template.bTactical = true;
	Template.bLastsUntilNextSupplyDrop = false;
	Template.MaxSuccesses = 0;
	Template.MinActivationDays = 21;
	Template.MaxActivationDays = 35;
	Template.MinDurationDays = 28;
	Template.MaxDurationDays = 28;
	Template.bInfiniteDuration = false;
	Template.StartingWeight = 5;
	Template.MinWeight = 1;
	Template.MaxWeight = 5;
	Template.WeightDeltaPerPlay = -2;
	Template.WeightDeltaPerActivate = 0;

	Template.OnActivatedFn = ActivateTacticalDarkEvent;
	Template.OnDeactivatedFn = DeactivateTacticalDarkEvent;

	return Template;
}

//---------------------------------------------------------------------------------------
static function X2DataTemplate CreateReturnFireTemplate()
{
	local X2DarkEventTemplate Template;

	`CREATE_X2TEMPLATE(class'X2DarkEventTemplate', Template, 'DarkEvent_ReturnFire');
	Template.Category = "DarkEvent";
//BEGIN AUTOGENERATED CODE: Template Overrides 'DarkEvent_ReturnFire'
	Template.ImagePath = "img:///UILibrary_XPACK_StrategyImages.DarkEvent_ReturnFire";
//END AUTOGENERATED CODE: Template Overrides 'DarkEvent_ReturnFire'
	Template.bRepeatable = false;
	Template.bTactical = true;
	Template.bLastsUntilNextSupplyDrop = false;
	Template.MaxSuccesses = 0;
	Template.MinActivationDays = 21;
	Template.MaxActivationDays = 35;
	Template.MinDurationDays = 28;
	Template.MaxDurationDays = 28;
	Template.bInfiniteDuration = false;
	Template.StartingWeight = 5;
	Template.MinWeight = 1;
	Template.MaxWeight = 5;
	Template.WeightDeltaPerPlay = -2;
	Template.WeightDeltaPerActivate = 0;

	Template.OnActivatedFn = ActivateTacticalDarkEvent;
	Template.OnDeactivatedFn = DeactivateTacticalDarkEvent;

	return Template;
}

static function X2DataTemplate CreateBendingReedTemplate()
{
	local X2DarkEventTemplate Template;

	`CREATE_X2TEMPLATE(class'X2DarkEventTemplate', Template, 'DarkEvent_BendingReed');

	Template.Category = "DarkEvent";
	Template.ImagePath = "img:///UILibrary_XPACK_StrategyImages.DarkEvent_Bending_Reed";
	Template.bRepeatable = false;
	Template.bTactical = true;
	Template.bLastsUntilNextSupplyDrop = false;
	Template.MaxSuccesses = 0;
	Template.MinActivationDays = 21;
	Template.MaxActivationDays = 35;
	Template.MinDurationDays = 28;
	Template.MaxDurationDays = 28;
	Template.bInfiniteDuration = false;
	Template.StartingWeight = 5;
	Template.MinWeight = 1;
	Template.MaxWeight = 5;
	Template.WeightDeltaPerPlay = -2;
	Template.WeightDeltaPerActivate = 0;

	Template.OnActivatedFn = ActivateTacticalDarkEvent;
	Template.OnDeactivatedFn = DeactivateTacticalDarkEvent;

	return Template;
}

static function X2DataTemplate CreateSealedArmorTemplate()
{
	local X2DarkEventTemplate Template;

	`CREATE_X2TEMPLATE(class'X2DarkEventTemplate', Template, 'DarkEvent_SealedArmor');

	Template.Category = "DarkEvent";
//BEGIN AUTOGENERATED CODE: Template Overrides 'DarkEvent_SealedArmor'
	Template.ImagePath = "img:///UILibrary_XPACK_StrategyImages.DarkEvent_Sealed_Armor";
//END AUTOGENERATED CODE: Template Overrides 'DarkEvent_SealedArmor'
	Template.bRepeatable = false;
	Template.bTactical = true;
	Template.bLastsUntilNextSupplyDrop = false;
	Template.MaxSuccesses = 0;
	Template.MinActivationDays = 21;
	Template.MaxActivationDays = 35;
	Template.MinDurationDays = 28;
	Template.MaxDurationDays = 28;
	Template.bInfiniteDuration = false;
	Template.StartingWeight = 5;
	Template.MinWeight = 1;
	Template.MaxWeight = 5;
	Template.WeightDeltaPerPlay = -2;
	Template.WeightDeltaPerActivate = 0;

	Template.OnActivatedFn = ActivateTacticalDarkEvent;
	Template.OnDeactivatedFn = DeactivateTacticalDarkEvent;

	return Template;
}

static function X2DataTemplate CreateUndyingLoyaltyTemplate()
{
	local X2DarkEventTemplate Template;

	`CREATE_X2TEMPLATE(class'X2DarkEventTemplate', Template, 'DarkEvent_UndyingLoyalty');

	Template.Category = "DarkEvent";
//BEGIN AUTOGENERATED CODE: Template Overrides 'DarkEvent_UndyingLoyalty'
	Template.ImagePath = "img:///UILibrary_XPACK_StrategyImages.DarkEvent_Undying_Loyalty";
//END AUTOGENERATED CODE: Template Overrides 'DarkEvent_UndyingLoyalty'
	Template.bRepeatable = false;
	Template.bTactical = true;
	Template.bLastsUntilNextSupplyDrop = false;
	Template.MaxSuccesses = 0;
	Template.MinActivationDays = 21;
	Template.MaxActivationDays = 35;
	Template.MinDurationDays = 28;
	Template.MaxDurationDays = 28;
	Template.bInfiniteDuration = false;
	Template.StartingWeight = 5;
	Template.MinWeight = 1;
	Template.MaxWeight = 5;
	Template.WeightDeltaPerPlay = -2;
	Template.WeightDeltaPerActivate = 0;

	Template.OnActivatedFn = ActivateTacticalDarkEvent;
	Template.OnDeactivatedFn = DeactivateTacticalDarkEvent;

	return Template;
}

static function X2DataTemplate CreateBarrierTemplate()
{
	local X2DarkEventTemplate Template;

	`CREATE_X2TEMPLATE(class'X2DarkEventTemplate', Template, 'DarkEvent_Barrier');

	Template.Category = "DarkEvent";
//BEGIN AUTOGENERATED CODE: Template Overrides 'DarkEvent_Barrier'
	Template.ImagePath = "img:///UILibrary_XPACK_StrategyImages.DarkEvent_Barrier";
//END AUTOGENERATED CODE: Template Overrides 'DarkEvent_Barrier'
	Template.bRepeatable = false;
	Template.bTactical = true;
	Template.bLastsUntilNextSupplyDrop = false;
	Template.MaxSuccesses = 0;
	Template.MinActivationDays = 21;
	Template.MaxActivationDays = 35;
	Template.MinDurationDays = 28;
	Template.MaxDurationDays = 28;
	Template.bInfiniteDuration = false;
	Template.StartingWeight = 5;
	Template.MinWeight = 1;
	Template.MaxWeight = 5;
	Template.WeightDeltaPerPlay = -2;
	Template.WeightDeltaPerActivate = 0;

	Template.OnActivatedFn = ActivateTacticalDarkEvent;
	Template.OnDeactivatedFn = DeactivateTacticalDarkEvent;
	Template.ModifyTacticalStartStateFn = BarrierTacticalStartModifier;

	return Template;
}
//---------------------------------------------------------------------------------------
static function BarrierTacticalStartModifier(XComGameState StartState)
{
	local XComGameState_BattleData BattleData;

	foreach StartState.IterateByClassType( class'XComGameState_BattleData', BattleData )
	{
		break;
	}
	`assert( BattleData != none );

	BattleData.ActiveSitReps.AddItem( 'DarkEventBarrierSitRep' );
}

static function X2DataTemplate CreateHighAlertTemplate()
{
	local X2DarkEventTemplate Template;

	`CREATE_X2TEMPLATE(class'X2DarkEventTemplate', Template, 'DarkEvent_HighAlert');

	Template.Category = "DarkEvent";
//BEGIN AUTOGENERATED CODE: Template Overrides 'DarkEvent_HighAlert'
	Template.ImagePath = "img:///UILibrary_XPACK_StrategyImages.DarkEvent_High_Alert";
//END AUTOGENERATED CODE: Template Overrides 'DarkEvent_HighAlert'
	Template.bRepeatable = false;
	Template.bTactical = true;
	Template.bLastsUntilNextSupplyDrop = false;
	Template.MaxSuccesses = 0;
	Template.MinActivationDays = 21;
	Template.MaxActivationDays = 35;
	Template.MinDurationDays = 28;
	Template.MaxDurationDays = 28;
	Template.bInfiniteDuration = false;
	Template.StartingWeight = 5;
	Template.MinWeight = 1;
	Template.MaxWeight = 5;
	Template.WeightDeltaPerPlay = -2;
	Template.WeightDeltaPerActivate = 0;

	Template.ModifyTacticalStartStateFn = HighAlertTacticalStartModifier;

	return Template;
}
//---------------------------------------------------------------------------------------
static function HighAlertTacticalStartModifier(XComGameState StartState)
{
	local XComGameState_BattleData BattleData;

	foreach StartState.IterateByClassType( class'XComGameState_BattleData', BattleData )
	{
		break;
	}
	`assert( BattleData != none );

	BattleData.bForceNoSquadConcealment = true;

	StartState.GetContext().PostBuildVisualizationFn.AddItem(BuildVisualizationForHighAlert);
}

private static function BuildVisualizationForHighAlert(XComGameState VisualizeGameState)
{
	local XComGameStateHistory History;
	local float LookAtDuration;
	local XComGameStateContext Context;
	local XComTacticalMissionManager MissionManager;
	local MissionSchedule ActiveMissionSchedule;
	local XComGameState_Unit UnitState;
	local array<XComGameState_Unit> AllConcealmentUnitStates;
	local VisualizationActionMetadata ActionMetadata, EmptyTrack;
	local X2Action_CameraLookAt LookAtAction;
	local X2Action_UpdateUI UIUpdateAction;
	local X2Action_PlaySoundAndFlyOver SoundAndFlyOver;
	local X2Action_Delay DelayAction;
	local array<X2Action> LastActions;

	History = `XCOMHISTORY;
	LookAtDuration = 0.5f;
	Context = VisualizeGameState.GetContext();

	MissionManager = `TACTICALMISSIONMGR;
	MissionManager.GetActiveMissionSchedule(ActiveMissionSchedule);

	// Remove ourself from the set of visualization functions. This way it doesn't get saved as part of the start state
	// and re-visualized on a load of a tactical game.
	VisualizeGameState.GetContext().PostBuildVisualizationFn.RemoveItem(BuildVisualizationForHighAlert);

	// if the XCom doesn't start in squad concealment anyway, we shouldn't do the flyovers
	// since the dark event isn't actually doing anything special here.
	if (!ActiveMissionSchedule.XComSquadStartsConcealed)
	{
		return;
	}

	foreach VisualizeGameState.IterateByClassType(class'XComGameState_Unit', UnitState)
	{
		if (UnitState.GetTeam() != eTeam_XCom)
			continue;

		if (UnitState.GetMyTemplate().bIsCosmetic)
			continue;

		if (UnitState.IsIndividuallyConcealed())
			continue;

		AllConcealmentUnitStates.AddItem( UnitState );
	}

	// concealment actions.  basically stolen from the squad concealment breaking visualization
	foreach AllConcealmentUnitStates( UnitState )
	{
		ActionMetadata = EmptyTrack;
		ActionMetadata.StateObject_OldState = History.GetGameStateForObjectID(UnitState.ObjectID, eReturnType_Reference, VisualizeGameState.HistoryIndex - 1);
		ActionMetadata.StateObject_NewState = UnitState;
		ActionMetadata.VisualizeActor = History.GetVisualizer(UnitState.ObjectID);

		if (LookAtAction == none) // do some special stuff for the first guy
		{
			// Camera pan to the instigator
			// wait for the camera to arrive
			LookAtAction = X2Action_CameraLookAt(class'X2Action_CameraLookAt'.static.AddToVisualizationTree(ActionMetadata, Context, false, ActionMetadata.LastActionAdded));
			LookAtAction.LookAtObject = UnitState;
			LookAtAction.UseTether = false;
			LookAtAction.BlockUntilActorOnScreen = true;
			LookAtAction.LookAtDuration = LookAtDuration;

			// animate in the HUD status update
			UIUpdateAction = X2Action_UpdateUI(class'X2Action_UpdateUI'.static.AddToVisualizationTree(ActionMetadata, Context, false, ActionMetadata.LastActionAdded));
			UIUpdateAction.UpdateType = EUIUT_HUD_Concealed;

			// update the concealment flag on all revealed units
			UIUpdateAction = X2Action_UpdateUI(class'X2Action_UpdateUI'.static.AddToVisualizationTree(ActionMetadata, Context, false, ActionMetadata.LastActionAdded));
			UIUpdateAction.SpecificID = -1;
			UIUpdateAction.UpdateType = EUIUT_UnitFlag_Concealed;

			//Instigator gets flyover with sound
			SoundAndFlyOver = X2Action_PlaySoundAndFlyOver(class'X2Action_PlaySoundAndFlyOver'.static.AddToVisualizationTree(ActionMetadata, Context, false, ActionMetadata.LastActionAdded));
			SoundAndFlyOver.SetSoundAndFlyOverParameters(SoundCue'SoundTacticalUI.Concealment_Unconcealed_Cue', default.HighAlertFlyoverText, 'SquadConcealmentBroken', eColor_Bad, class'UIUtilities_Image'.const.UnitStatus_Revealed);

			// pause a few seconds
			DelayAction = X2Action_Delay(class'X2Action_Delay'.static.AddToVisualizationTree(ActionMetadata, Context, false, ActionMetadata.LastActionAdded));
			DelayAction.Duration = LookAtDuration;

			LastActions.AddItem( ActionMetadata.LastActionAdded );
		}
		else
		{
			//Everyone else waits for the instigator
			class'X2Action_WaitForAbilityEffect'.static.AddToVisualizationTree(ActionMetadata, Context, false, ActionMetadata.LastActionAdded);

			//Everyone else, if we're showing them, just gets visual flyovers
			SoundAndFlyOver = X2Action_PlaySoundAndFlyOver(class'X2Action_PlaySoundAndFlyOver'.static.AddToVisualizationTree(ActionMetadata, Context, false, ActionMetadata.LastActionAdded));
			SoundAndFlyOver.SetSoundAndFlyOverParameters(None, default.HighAlertFlyoverText, '', eColor_Bad, class'UIUtilities_Image'.const.UnitStatus_Revealed);

			LastActions.AddItem( ActionMetadata.LastActionAdded );
		}
	}

	//Update flashlight status on everyone (turn on lights if revealed)
	// also use this action as a join of all the individual branches we made
	class'X2Action_UpdateFlashlight'.static.AddToVisualizationTree(ActionMetadata, Context, false, , LastActions);
}

static function X2DataTemplate CreateDarkTowerTemplate()
{
	local X2DarkEventTemplate Template;

	`CREATE_X2TEMPLATE(class'X2DarkEventTemplate', Template, 'DarkEvent_DarkTower');

	Template.Category = "DarkEvent";
//BEGIN AUTOGENERATED CODE: Template Overrides 'DarkEvent_DarkTower'
	Template.ImagePath = "img:///UILibrary_XPACK_StrategyImages.DarkEvent_Dark_Tower";
//END AUTOGENERATED CODE: Template Overrides 'DarkEvent_DarkTower'
	Template.bRepeatable = false;
	Template.bTactical = true;
	Template.bLastsUntilNextSupplyDrop = false;
	Template.MaxSuccesses = 0;
	Template.MinActivationDays = 21;
	Template.MaxActivationDays = 35;
	Template.MinDurationDays = 28;
	Template.MaxDurationDays = 28;
	Template.bInfiniteDuration = false;
	Template.StartingWeight = 5;
	Template.MinWeight = 1;
	Template.MaxWeight = 5;
	Template.WeightDeltaPerPlay = -2;
	Template.WeightDeltaPerActivate = 0;

	Template.ModifyTacticalStartStateFn = DarkTowerTacticalStartModifier;

	return Template;
}
//---------------------------------------------------------------------------------------
static function DarkTowerTacticalStartModifier(XComGameState StartState)
{
	local XComGameState_BattleData BattleData;

	foreach StartState.IterateByClassType( class'XComGameState_BattleData', BattleData )
	{
		break;
	}
	`assert( BattleData != none );

	BattleData.ActiveSitReps.AddItem( 'DarkEventDarkTowerSitRep' );
}

static function X2DataTemplate CreateLostWorldTemplate()
{
	local X2DarkEventTemplate Template;

	`CREATE_X2TEMPLATE(class'X2DarkEventTemplate', Template, 'DarkEvent_LostWorld');

	Template.Category = "DarkEvent";
//BEGIN AUTOGENERATED CODE: Template Overrides 'DarkEvent_LostWorld'
	Template.ImagePath = "img:///UILibrary_XPACK_StrategyImages.DarkEvent_Lost_World";
//END AUTOGENERATED CODE: Template Overrides 'DarkEvent_LostWorld'
	Template.bRepeatable = false;
	Template.bTactical = true;
	Template.bLastsUntilNextSupplyDrop = false;
	Template.MaxSuccesses = 0;
	Template.MinActivationDays = 21;
	Template.MaxActivationDays = 35;
	Template.MinDurationDays = 28;
	Template.MaxDurationDays = 28;
	Template.bInfiniteDuration = false;
	Template.StartingWeight = 5;
	Template.MinWeight = 1;
	Template.MaxWeight = 5;
	Template.WeightDeltaPerPlay = -2;
	Template.WeightDeltaPerActivate = 0;

	Template.OnDeactivatedFn = DeactivateLostWorld;
	Template.ModifyTacticalStartStateFn = LostWorldTacticalStartModifier;

	return Template;
}
//---------------------------------------------------------------------------------------
static function LostWorldTacticalStartModifier(XComGameState StartState)
{
	local XComGameState_BattleData BattleData;
	local XComGameState_HeadquartersXCom XComHQ;
	local int SITREPIndex;

	foreach StartState.IterateByClassType( class'XComGameState_BattleData', BattleData )
	{
		break;
	}
	`assert( BattleData != none );
	
	foreach StartState.IterateByClassType(class'XComGameState_HeadquartersXCom', XComHQ)
	{
		break;
	}
	`assert( XComHQ != none );

	// don't apply to the following mission types
	switch (BattleData.MapData.ActiveMission.sType)
	{
		case "Sabotage":
		case "ChosenStrongholdShort":
		case "ChosenStrongholdLong":
		case "GP_Broadcast":
		case "GP_FortressLeadup":
		case "AlienNest":
		case "LastGift":
			// If the Lost sitrep is active on these missions, remove the tag so they do not spawn
			SITREPIndex = XComHQ.TacticalGameplayTags.Find('SITREP_TheLost');
			if (SITREPIndex != INDEX_NONE)
			{
				XComHQ.TacticalGameplayTags.Remove(SITREPIndex, 1);
			}

			return;

		default:
			break;
	}

	// We already have the lost, don't modify the number of waves
	if (XComHQ.TacticalGameplayTags.Find( 'SITREP_TheLost' ) != INDEX_NONE)
		return;

	XComHQ.TacticalGameplayTags.AddItem( 'SITREP_TheLost' );
	BattleData.LostMaxWaves = 1;
}

//---------------------------------------------------------------------------------------
static function DeactivateLostWorld(XComGameState NewGameState, StateObjectReference InRef)
{
	local XComGameState_HeadquartersXCom XComHQ;
	local XComGameStateHistory History;

	History = `XCOMHISTORY;
	XComHQ = XComGameState_HeadquartersXCom(History.GetSingleGameStateObjectForClass(class'XComGameState_HeadquartersXCom'));

	if (XComHQ.TacticalGameplayTags.Find('SITREP_TheLost') != INDEX_NONE)
	{
		XComHQ = XComGameState_HeadquartersXCom(NewGameState.ModifyStateObject(class'XComGameState_HeadquartersXCom', XComHQ.ObjectID));
		XComHQ.TacticalGameplayTags.RemoveItem('SITREP_TheLost');
	}
}

static function X2DataTemplate CreateCounterattackEventTemplate()
{
	local X2DarkEventTemplate Template;

	`CREATE_X2TEMPLATE(class'X2DarkEventTemplate', Template, 'DarkEvent_Counterattack');

	Template.Category = "DarkEvent";
//BEGIN AUTOGENERATED CODE: Template Overrides 'DarkEvent_Counterattack'
	Template.ImagePath = "img:///UILibrary_XPACK_StrategyImages.DarkEvent_Counterattack";
//END AUTOGENERATED CODE: Template Overrides 'DarkEvent_Counterattack'
	Template.bRepeatable = false;
	Template.bTactical = true;
	Template.bLastsUntilNextSupplyDrop = false;
	Template.MaxSuccesses = 0;
	Template.MinActivationDays = 21;
	Template.MaxActivationDays = 35;
	Template.MinDurationDays = 28;
	Template.MaxDurationDays = 28;
	Template.bInfiniteDuration = false;
	Template.StartingWeight = 5;
	Template.MinWeight = 1;
	Template.MaxWeight = 5;
	Template.WeightDeltaPerPlay = -2;
	Template.WeightDeltaPerActivate = 0;

	Template.OnActivatedFn = ActivateTacticalDarkEvent;
	Template.OnDeactivatedFn = DeactivateTacticalDarkEvent;
	Template.ModifyTacticalStartStateFn = CounterattackTacticalStartModifier;

	return Template;
}
//---------------------------------------------------------------------------------------
static function CounterattackTacticalStartModifier(XComGameState StartState)
{
	local X2EventManager EventManager;
	local XComGameState_Player Player;
	local Object PlayerObject;

	EventManager = `XEVENTMGR;

	foreach StartState.IterateByClassType( class'XComGameState_Player', Player )
	{
		if (Player.GetTeam() == eTeam_XCom)
			break;
	}
	`assert( Player != none );

	PlayerObject = Player;

	EventManager.RegisterForEvent(PlayerObject, 'ScamperEnd', Player.DarkEventCounterattackScamperResponse, ELD_OnStateSubmitted);
}

static function X2DataTemplate CreateCollateralDamageTemplate()
{
	local X2DarkEventTemplate Template;

	`CREATE_X2TEMPLATE(class'X2DarkEventTemplate', Template, 'DarkEvent_CollateralDamage');

	Template.Category = "DarkEvent";
	//BEGIN AUTOGENERATED CODE: Template Overrides 'DarkEvent_CollateralDamage'
	Template.ImagePath = "img:///UILibrary_XPACK_StrategyImages.DarkEvent_Collateral_Damage";
	//END AUTOGENERATED CODE: Template Overrides 'DarkEvent_CollateralDamage'
	Template.bRepeatable = false;
	Template.bTactical = true;
	Template.bLastsUntilNextSupplyDrop = false;
	Template.MaxSuccesses = 0;
	Template.MinActivationDays = 21;
	Template.MaxActivationDays = 35;
	Template.MinDurationDays = 28;
	Template.MaxDurationDays = 28;
	Template.bInfiniteDuration = false;
	Template.StartingWeight = 5;
	Template.MinWeight = 1;
	Template.MaxWeight = 5;
	Template.WeightDeltaPerPlay = -2;
	Template.WeightDeltaPerActivate = 0;

	Template.OnActivatedFn = ActivateTacticalDarkEvent;
	Template.OnDeactivatedFn = DeactivateTacticalDarkEvent;

	return Template;
}

//---------------------------------------------------------------------------------------
static function X2DataTemplate CreateSpiderAndFlyTemplate()
{
	local X2DarkEventTemplate Template;

	`CREATE_X2TEMPLATE(class'X2DarkEventTemplate', Template, 'DarkEvent_SpiderAndFly');
	Template.Category = "DarkEvent";
	Template.ImagePath = "img:///UILibrary_XPACK_StrategyImages.DarkEvent_Spider_and_Fly";
	Template.bRepeatable = true;
	Template.bTactical = false;
	Template.bLastsUntilNextSupplyDrop = false;
	Template.MaxSuccesses = 0;
	Template.MinActivationDays = 21;
	Template.MaxActivationDays = 35;
	Template.MinDurationDays = 28;
	Template.MaxDurationDays = 28;
	Template.bInfiniteDuration = false;
	Template.StartingWeight = 5;
	Template.MinWeight = 1;
	Template.MaxWeight = 5;
	Template.WeightDeltaPerPlay = -2;
	Template.WeightDeltaPerActivate = 0;

	Template.OnActivatedFn = ActivateSpiderAndFly;
	Template.OnDeactivatedFn = DeactivateSpiderAndFly;

	return Template;
}

//---------------------------------------------------------------------------------------
static function ActivateSpiderAndFly(XComGameState NewGameState, StateObjectReference InRef, optional bool bReactivate = false)
{
	local XComGameState_HeadquartersResistance ResHQ;

	ResHQ = GetAndAddResHQ(NewGameState);
	ResHQ.ActivateCovertActionDarkEventRisk(NewGameState, 'CovertActionRisk_Ambush');
}

//---------------------------------------------------------------------------------------
static function DeactivateSpiderAndFly(XComGameState NewGameState, StateObjectReference InRef)
{
	local XComGameState_HeadquartersResistance ResHQ;

	ResHQ = GetAndAddResHQ(NewGameState);
	ResHQ.DeactivateCovertActionDarkEventRisk(NewGameState, 'CovertActionRisk_Ambush');
}

//---------------------------------------------------------------------------------------
static function X2DataTemplate CreateLeftBehindTemplate()
{
	local X2DarkEventTemplate Template;

	`CREATE_X2TEMPLATE(class'X2DarkEventTemplate', Template, 'DarkEvent_LeftBehind');
	Template.Category = "DarkEvent";
	Template.ImagePath = "img:///UILibrary_XPACK_StrategyImages.DarkEvent_Left_Behind";
	Template.bRepeatable = true;
	Template.bTactical = false;
	Template.bLastsUntilNextSupplyDrop = false;
	Template.MaxSuccesses = 0;
	Template.MinActivationDays = 21;
	Template.MaxActivationDays = 35;
	Template.MinDurationDays = 28;
	Template.MaxDurationDays = 28;
	Template.bInfiniteDuration = false;
	Template.StartingWeight = 5;
	Template.MinWeight = 1;
	Template.MaxWeight = 5;
	Template.WeightDeltaPerPlay = -2;
	Template.WeightDeltaPerActivate = 0;

	Template.OnActivatedFn = ActivateLeftBehind;
	Template.OnDeactivatedFn = DeactivateLeftBehind;

	return Template;
}

//---------------------------------------------------------------------------------------
static function ActivateLeftBehind(XComGameState NewGameState, StateObjectReference InRef, optional bool bReactivate = false)
{
	local XComGameState_HeadquartersResistance ResHQ;

	ResHQ = GetAndAddResHQ(NewGameState);
	ResHQ.ActivateCovertActionDarkEventRisk(NewGameState, 'CovertActionRisk_SoldierCaptured');
}

//---------------------------------------------------------------------------------------
static function DeactivateLeftBehind(XComGameState NewGameState, StateObjectReference InRef)
{
	local XComGameState_HeadquartersResistance ResHQ;

	ResHQ = GetAndAddResHQ(NewGameState);
	ResHQ.DeactivateCovertActionDarkEventRisk(NewGameState, 'CovertActionRisk_SoldierCaptured');
}

//---------------------------------------------------------------------------------------
static function X2DataTemplate CreateGoneToGroundTemplate()
{
	local X2DarkEventTemplate Template;

	`CREATE_X2TEMPLATE(class'X2DarkEventTemplate', Template, 'DarkEvent_GoneToGround');
	Template.Category = "DarkEvent";
	Template.ImagePath = "img:///UILibrary_XPACK_StrategyImages.DarkEvent_Gone_to_Ground";
	Template.bRepeatable = true;
	Template.bTactical = false;
	Template.bLastsUntilNextSupplyDrop = false;
	Template.MaxSuccesses = 0;
	Template.MinActivationDays = 21;
	Template.MaxActivationDays = 35;
	Template.MinDurationDays = 38;
	Template.MaxDurationDays = 45;
	Template.bInfiniteDuration = false;
	Template.StartingWeight = 5;
	Template.MinWeight = 1;
	Template.MaxWeight = 5;
	Template.WeightDeltaPerPlay = -2;
	Template.WeightDeltaPerActivate = 0;

	Template.OnActivatedFn = ActivateGoneToGround;
	Template.OnDeactivatedFn = DeactivateGoneToGround;

	return Template;
}

//---------------------------------------------------------------------------------------
static function ActivateGoneToGround(XComGameState NewGameState, StateObjectReference InRef, optional bool bReactivate = false)
{
	local XComGameState_BlackMarket BlackMarketState;

	BlackMarketState = GetAndAddBlackMarket(NewGameState);
	BlackMarketState.ForceCloseBlackMarket(NewGameState);
}

//---------------------------------------------------------------------------------------
static function DeactivateGoneToGround(XComGameState NewGameState, StateObjectReference InRef)
{
	local XComGameState_BlackMarket BlackMarketState;

	BlackMarketState = GetAndAddBlackMarket(NewGameState);
	BlackMarketState.ShowBlackMarket(NewGameState, true); // Force the Black Market to reappear
}

//---------------------------------------------------------------------------------------
static function X2DataTemplate CreateMadeWholeTemplate()
{
	local X2DarkEventTemplate Template;

	`CREATE_X2TEMPLATE(class'X2DarkEventTemplate', Template, 'DarkEvent_MadeWhole');
	Template.Category = "DarkEvent";
//BEGIN AUTOGENERATED CODE: Template Overrides 'DarkEvent_MadeWhole'
	Template.ImagePath = "img:///UILibrary_XPACK_StrategyImages.DarkEvent_MadeWhole";
//END AUTOGENERATED CODE: Template Overrides 'DarkEvent_MadeWhole'
	Template.bRepeatable = true;
	Template.bTactical = false;
	Template.bLastsUntilNextSupplyDrop = false;
	Template.MaxSuccesses = 0;
	Template.MinActivationDays = 21;
	Template.MaxActivationDays = 35;
	Template.MinDurationDays = 38;
	Template.MaxDurationDays = 45;
	Template.bInfiniteDuration = false;
	Template.StartingWeight = 5;
	Template.MinWeight = 1;
	Template.MaxWeight = 5;
	Template.WeightDeltaPerPlay = -2;
	Template.WeightDeltaPerActivate = 0;

	Template.OnActivatedFn = ActivateMadeWhole;
	Template.OnDeactivatedFn = DeactivateMadeWhole;

	return Template;
}

//---------------------------------------------------------------------------------------
static function ActivateMadeWhole(XComGameState NewGameState, StateObjectReference InRef, optional bool bReactivate = false)
{
	local XComGameStateHistory History;
	local XComGameState_AdventChosen ChosenState;

	History = `XCOMHISTORY;

	foreach History.IterateByClassType(class'XComGameState_AdventChosen', ChosenState)
	{
		ChosenState = XComGameState_AdventChosen(NewGameState.ModifyStateObject(class'XComGameState_AdventChosen', ChosenState.ObjectID));
		ChosenState.bIgnoreWeaknesses = true;
	}
}

//---------------------------------------------------------------------------------------
static function DeactivateMadeWhole(XComGameState NewGameState, StateObjectReference InRef)
{
	local XComGameStateHistory History;
	local XComGameState_AdventChosen ChosenState;

	History = `XCOMHISTORY;

	foreach History.IterateByClassType(class'XComGameState_AdventChosen', ChosenState)
	{
		ChosenState = XComGameState_AdventChosen(NewGameState.ModifyStateObject(class'XComGameState_AdventChosen', ChosenState.ObjectID));
		ChosenState.bIgnoreWeaknesses = false;
	}
}

//---------------------------------------------------------------------------------------
static function X2DataTemplate CreateWildHuntTemplate()
{
	local X2DarkEventTemplate Template;

	`CREATE_X2TEMPLATE(class'X2DarkEventTemplate', Template, 'DarkEvent_WildHunt');
	Template.Category = "DarkEvent";
	Template.ImagePath = "img:///UILibrary_XPACK_StrategyImages.DarkEvent_Wild_Hunt";
	Template.bRepeatable = true;
	Template.bTactical = false;
	Template.bLastsUntilNextSupplyDrop = false;
	Template.MaxSuccesses = 0;
	Template.MinActivationDays = 21;
	Template.MaxActivationDays = 35;
	Template.MinDurationDays = 38;
	Template.MaxDurationDays = 45;
	Template.bInfiniteDuration = false;
	Template.StartingWeight = 5;
	Template.MinWeight = 1;
	Template.MaxWeight = 5;
	Template.WeightDeltaPerPlay = -2;
	Template.WeightDeltaPerActivate = 0;

	Template.OnActivatedFn = ActivateWildHunt;
	Template.OnDeactivatedFn = DeactivateWildHunt;

	return Template;
}

//---------------------------------------------------------------------------------------
static function ActivateWildHunt(XComGameState NewGameState, StateObjectReference InRef, optional bool bReactivate = false)
{
	local XComGameState_HeadquartersAlien AlienHQ;

	AlienHQ = GetAndAddAlienHQ(NewGameState);
	AlienHQ.ChosenAppearChanceScalar = `ScaleStrategyArrayFloat(default.WildHuntScalar);
}

//---------------------------------------------------------------------------------------
static function DeactivateWildHunt(XComGameState NewGameState, StateObjectReference InRef)
{
	local XComGameState_HeadquartersAlien AlienHQ;

	AlienHQ = GetAndAddAlienHQ(NewGameState);
	AlienHQ.ChosenAppearChanceScalar = 1.0f;
}

//---------------------------------------------------------------------------------------
static function X2DataTemplate CreateLoyaltyAmongThievesAssassinTemplate()
{
	local X2DarkEventTemplate Template;

	`CREATE_X2TEMPLATE(class'X2DarkEventTemplate', Template, 'DarkEvent_LoyaltyAmongThieves_Assassin');
	Template.Category = "DarkEvent";
	Template.ImagePath = "img:///UILibrary_XPACK_StrategyImages.DarkEvent_Loyalty_Among_Thieves_Assasin";
	Template.bRepeatable = true;
	Template.bTactical = false;
	Template.bLastsUntilNextSupplyDrop = false;
	Template.MaxSuccesses = 0;
	Template.MinActivationDays = 21;
	Template.MaxActivationDays = 35;
	Template.MinDurationDays = 38;
	Template.MaxDurationDays = 45;
	Template.bInfiniteDuration = false;
	Template.StartingWeight = 5;
	Template.MinWeight = 1;
	Template.MaxWeight = 5;
	Template.WeightDeltaPerPlay = -2;
	Template.WeightDeltaPerActivate = 0;

	Template.OnActivatedFn = ActivateLoyaltyAmongThievesAssassin;
	Template.OnDeactivatedFn = DeactivateLoyaltyAmongThievesAssassin;
	Template.CanActivateFn = CanActivateLoyaltyAmongThievesAssassin;
	Template.CanCompleteFn = CanCompleteLoyaltyAmongThievesAssassin;

	return Template;
}

//---------------------------------------------------------------------------------------
static function ActivateLoyaltyAmongThievesAssassin(XComGameState NewGameState, StateObjectReference InRef, optional bool bReactivate = false)
{
	GiveChosenKnowledgeGainBonus(NewGameState, 'Chosen_Assassin');
}

//---------------------------------------------------------------------------------------
static function DeactivateLoyaltyAmongThievesAssassin(XComGameState NewGameState, StateObjectReference InRef)
{
	RemoveChosenKnowledgeGainBonus(NewGameState, 'Chosen_Assassin');
}

//---------------------------------------------------------------------------------------
static function bool CanActivateLoyaltyAmongThievesAssassin(XComGameState_DarkEvent DarkEventState)
{
	return LoyaltyAmongThievesValid('Chosen_Assassin');
}
//---------------------------------------------------------------------------------------
static function bool CanCompleteLoyaltyAmongThievesAssassin(XComGameState_DarkEvent DarkEventState)
{
	return LoyaltyAmongThievesValid('Chosen_Assassin');
}

//---------------------------------------------------------------------------------------
static function X2DataTemplate CreateLoyaltyAmongThievesHunterTemplate()
{
	local X2DarkEventTemplate Template;

	`CREATE_X2TEMPLATE(class'X2DarkEventTemplate', Template, 'DarkEvent_LoyaltyAmongThieves_Hunter');
	Template.Category = "DarkEvent";
	Template.ImagePath = "img:///UILibrary_XPACK_StrategyImages.DarkEvent_Loyalty_Among_Thieves_Hunter";
	Template.bRepeatable = true;
	Template.bTactical = false;
	Template.bLastsUntilNextSupplyDrop = false;
	Template.MaxSuccesses = 0;
	Template.MinActivationDays = 21;
	Template.MaxActivationDays = 35;
	Template.MinDurationDays = 38;
	Template.MaxDurationDays = 45;
	Template.bInfiniteDuration = false;
	Template.StartingWeight = 5;
	Template.MinWeight = 1;
	Template.MaxWeight = 5;
	Template.WeightDeltaPerPlay = -2;
	Template.WeightDeltaPerActivate = 0;

	Template.OnActivatedFn = ActivateLoyaltyAmongThievesHunter;
	Template.OnDeactivatedFn = DeactivateLoyaltyAmongThievesHunter;
	Template.CanActivateFn = CanActivateLoyaltyAmongThievesHunter;
	Template.CanCompleteFn = CanCompleteLoyaltyAmongThievesHunter;

	return Template;
}

//---------------------------------------------------------------------------------------
static function ActivateLoyaltyAmongThievesHunter(XComGameState NewGameState, StateObjectReference InRef, optional bool bReactivate = false)
{
	GiveChosenKnowledgeGainBonus(NewGameState, 'Chosen_Hunter');
}

//---------------------------------------------------------------------------------------
static function DeactivateLoyaltyAmongThievesHunter(XComGameState NewGameState, StateObjectReference InRef)
{
	RemoveChosenKnowledgeGainBonus(NewGameState, 'Chosen_Hunter');
}

//---------------------------------------------------------------------------------------
static function bool CanActivateLoyaltyAmongThievesHunter(XComGameState_DarkEvent DarkEventState)
{
	return LoyaltyAmongThievesValid('Chosen_Hunter');
}
//---------------------------------------------------------------------------------------
static function bool CanCompleteLoyaltyAmongThievesHunter(XComGameState_DarkEvent DarkEventState)
{
	return LoyaltyAmongThievesValid('Chosen_Hunter');
}

//---------------------------------------------------------------------------------------
static function X2DataTemplate CreateLoyaltyAmongThievesWarlockTemplate()
{
	local X2DarkEventTemplate Template;

	`CREATE_X2TEMPLATE(class'X2DarkEventTemplate', Template, 'DarkEvent_LoyaltyAmongThieves_Warlock');
	Template.Category = "DarkEvent";
	Template.ImagePath = "img:///UILibrary_XPACK_StrategyImages.DarkEvent_Loyalty_Among_Thieves_Warlock";
	Template.bRepeatable = true;
	Template.bTactical = false;
	Template.bLastsUntilNextSupplyDrop = false;
	Template.MaxSuccesses = 0;
	Template.MinActivationDays = 21;
	Template.MaxActivationDays = 35;
	Template.MinDurationDays = 38;
	Template.MaxDurationDays = 45;
	Template.bInfiniteDuration = false;
	Template.StartingWeight = 5;
	Template.MinWeight = 1;
	Template.MaxWeight = 5;
	Template.WeightDeltaPerPlay = -2;
	Template.WeightDeltaPerActivate = 0;

	Template.OnActivatedFn = ActivateLoyaltyAmongThievesWarlock;
	Template.OnDeactivatedFn = DeactivateLoyaltyAmongThievesWarlock;
	Template.CanActivateFn = CanActivateLoyaltyAmongThievesWarlock;
	Template.CanCompleteFn = CanCompleteLoyaltyAmongThievesWarlock;

	return Template;
}

//---------------------------------------------------------------------------------------
static function ActivateLoyaltyAmongThievesWarlock(XComGameState NewGameState, StateObjectReference InRef, optional bool bReactivate = false)
{
	GiveChosenKnowledgeGainBonus(NewGameState, 'Chosen_Warlock');
}

//---------------------------------------------------------------------------------------
static function DeactivateLoyaltyAmongThievesWarlock(XComGameState NewGameState, StateObjectReference InRef)
{
	RemoveChosenKnowledgeGainBonus(NewGameState, 'Chosen_Warlock');
}

//---------------------------------------------------------------------------------------
static function bool CanActivateLoyaltyAmongThievesWarlock(XComGameState_DarkEvent DarkEventState)
{
	return LoyaltyAmongThievesValid('Chosen_Warlock');
}
//---------------------------------------------------------------------------------------
static function bool CanCompleteLoyaltyAmongThievesWarlock(XComGameState_DarkEvent DarkEventState)
{
	return LoyaltyAmongThievesValid('Chosen_Warlock');
}

//---------------------------------------------------------------------------------------
private static function GiveChosenKnowledgeGainBonus(XComGameState NewGameState, name ChosenTemplateName)
{
	local XComGameStateHistory History;
	local XComGameState_AdventChosen ChosenState;

	History = `XCOMHISTORY;

	foreach History.IterateByClassType(class'XComGameState_AdventChosen', ChosenState)
	{
		if(ChosenState.GetMyTemplateName() == ChosenTemplateName)
		{
			ChosenState = XComGameState_AdventChosen(NewGameState.ModifyStateObject(class'XComGameState_AdventChosen', ChosenState.ObjectID));
			ChosenState.KnowledgeFromOtherChosenPercent = `ScaleStrategyArrayFloat(default.KnowledgeGainPercent);
			break;
		}
	}
}

//---------------------------------------------------------------------------------------
private static function RemoveChosenKnowledgeGainBonus(XComGameState NewGameState, name ChosenTemplateName)
{
	local XComGameStateHistory History;
	local XComGameState_AdventChosen ChosenState;

	History = `XCOMHISTORY;

	foreach History.IterateByClassType(class'XComGameState_AdventChosen', ChosenState)
	{
		if(ChosenState.GetMyTemplateName() == ChosenTemplateName)
		{
			ChosenState = XComGameState_AdventChosen(NewGameState.ModifyStateObject(class'XComGameState_AdventChosen', ChosenState.ObjectID));
			ChosenState.KnowledgeFromOtherChosenPercent = 0.0f;
			break;
		}
	}
}

//---------------------------------------------------------------------------------------
private static function bool LoyaltyAmongThievesValid(name ChosenTemplateName)
{
	local XComGameStateHistory History;
	local XComGameState_AdventChosen ChosenState;
	local int NumActiveChosen;
	local bool bSpecifiedChosenActive;

	History = `XCOMHISTORY;
	NumActiveChosen = 0;
	bSpecifiedChosenActive = false;

	foreach History.IterateByClassType(class'XComGameState_AdventChosen', ChosenState)
	{
		if(ChosenState.bMetXCom && !ChosenState.bDefeated)
		{
			NumActiveChosen++;

			if(ChosenState.GetMyTemplateName() == ChosenTemplateName)
			{
				bSpecifiedChosenActive = true;
			}
		}
	}

	return (bSpecifiedChosenActive && NumActiveChosen > 1);
}

//#############################################################################################
//----------------   DIFFICULTY HELPERS   -----------------------------------------------------
//#############################################################################################

//---------------------------------------------------------------------------------------
static function int GetSignalJammingHours()
{
	return `ScaleStrategyArrayInt(default.SignalJammingHours);
}

//---------------------------------------------------------------------------------------
static function float GetSignalJammingIncrease()
{
	return `ScaleStrategyArrayFloat(default.SignalJammingIncrease);
}
