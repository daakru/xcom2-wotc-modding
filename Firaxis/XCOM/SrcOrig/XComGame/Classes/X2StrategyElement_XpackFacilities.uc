//---------------------------------------------------------------------------------------
//  FILE:    X2StrategyElement_XpackFacilities.uc
//  AUTHOR:  Joe Weinhoffer
//           
//---------------------------------------------------------------------------------------
//  Copyright (c) 2016 Firaxis Games, Inc. All rights reserved.
//---------------------------------------------------------------------------------------
class X2StrategyElement_XpackFacilities extends X2StrategyElement_DefaultFacilities
	config(GameData);

var config StrategyCost BoostSoldierCost;

static function array<X2DataTemplate> CreateTemplates()
{
	local array<X2DataTemplate> Facilities;

	Facilities.AddItem(CreateResistanceRingTemplate());
	Facilities.AddItem(CreateRecoveryCenterTemplate());

	return Facilities;
}

//---------------------------------------------------------------------------------------
// RESISTANCE RING
//---------------------------------------------------------------------------------------
static function X2DataTemplate CreateResistanceRingTemplate()
{
	local X2FacilityTemplate Template;
	local StaffSlotDefinition StaffSlotDef;
	local ArtifactCost Resources;

	`CREATE_X2TEMPLATE(class'X2FacilityTemplate', Template, 'ResistanceRing');
	Template.bIsCoreFacility = false;
	Template.bIsUniqueFacility = true;
	Template.bIsIndestructible = false;
	Template.MapName = "AVG_Ring";
	Template.AnimMapName = "AVG_Ring_Anim";
	Template.FlyInRemoteEvent = '';
//BEGIN AUTOGENERATED CODE: Template Overrides 'ResistanceRing'
	Template.strImage = "img:///UILibrary_XPACK_StrategyImages.ChooseFacility_TheRing";
	Template.NeedsAttentionNarrative = "";
//END AUTOGENERATED CODE: Template Overrides 'ResistanceRing'
	Template.SelectFacilityFn = SelectFacility;
	Template.OnFacilityBuiltFn = OnResistanceRingBuilt;
	Template.OnFacilityRemovedFn = OnResistanceRingRemoved;
	Template.IsFacilityProjectActiveFn = IsResistanceRingProjectActive;
	Template.NeedsAttentionFn = ResistanceRingNeedsAttention;

	Template.Upgrades.AddItem('ResistanceRing_UpgradeI');
	Template.Upgrades.AddItem('ResistanceRing_UpgradeII');
	Template.Upgrades.AddItem('ResistanceRing_ReaperPlaque');
	Template.Upgrades.AddItem('ResistanceRing_TemplarPlaque');
	Template.Upgrades.AddItem('ResistanceRing_SkirmisherPlaque');

	Template.UIFacilityClass = class'UIFacility_CovertActions';
	Template.FacilityEnteredAkEvent = "Play_Facility_Ambience_ResistanceRing";

	Template.BaseMinFillerCrew = 0;
	Template.MaxFillerCrew = 0;
	
	Template.FillerSlots.AddItem('Crew');
	Template.FillerSlots.AddItem('Crew');
	Template.FillerSlots.AddItem('Crew');
	Template.FillerSlots.AddItem('Crew');
	Template.FillerSlots.AddItem('Crew');
	Template.FillerSlots.AddItem('Crew');
	Template.FillerSlots.AddItem('Crew');
	Template.FillerSlots.AddItem('Crew');

	// Staff Slots
	StaffSlotDef.StaffSlotTemplateName = 'ResistanceRingStaffSlot';
	Template.StaffSlotDefs.AddItem(StaffSlotDef);
	
	// Requirements
	Template.Requirements.SpecialRequirementsFn = IsResistanceFactionMet;

	// Stats
	Template.PointsToComplete = GetFacilityBuildDays(12);
	Template.iPower = -3;
	Template.UpkeepCost = 10;

	// Cost
	Resources.ItemTemplateName = 'Supplies';
	Resources.Quantity = 80;
	Template.Cost.ResourceCosts.AddItem(Resources);

	// this is a GP priority facility
	Template.bPriority = true;

	return Template;
}

static function OnResistanceRingBuilt(StateObjectReference FacilityRef)
{
	local XComGameStateHistory History;
	local XComGameState_HeadquartersResistance ResHQ;
	local XComGameState_ResistanceFaction FactionState;
	local XComGameState_FacilityXCom FacilityState;
	local XComGameState NewGameState;
	local array<Name> ExclusionList;
	local int NumActionsToAdd;

	History = `XCOMHISTORY;
	NewGameState = class'XComGameStateContext_ChangeContainer'.static.CreateChangeState("On Resistance Ring Built");

	FacilityState = XComGameState_FacilityXCom(NewGameState.ModifyStateObject(class'XComGameState_FacilityXCom', FacilityRef.ObjectID));

	// Ensure that every faction has some covert actions generated
	foreach History.IterateByClassType(class'XComGameState_ResistanceFaction', FactionState)
	{
		// Create the Golden Path Covert Actions if they do not exist yet, so something can be presented to the player
		// Regular Covert Actions will be created when the Faction is officially met by XCOM
		FactionState = XComGameState_ResistanceFaction(NewGameState.ModifyStateObject(class'XComGameState_ResistanceFaction', FactionState.ObjectID));
		FactionState.CreateGoldenPathActions(NewGameState);

		if (FactionState.bMetXCom)
		{
			// If the Faction's influence was raised before the Ring was built, add some extra covert actions for that Faction
			if (FactionState.CovertActions.Length < class'XComGameState_ResistanceFaction'.default.CovertActionsPerInfluence[FactionState.Influence])
			{
				ResHQ = XComGameState_HeadquartersResistance(History.GetSingleGameStateObjectForClass(class'XComGameState_HeadquartersResistance'));
				ResHQ = XComGameState_HeadquartersResistance(NewGameState.ModifyStateObject(class'XComGameState_HeadquartersResistance', ResHQ.ObjectID));
				ExclusionList = ResHQ.CovertActionExclusionList; // Get the current list of covert actions for other factions from Res HQ

				NumActionsToAdd = (class'XComGameState_ResistanceFaction'.default.CovertActionsPerInfluence[FactionState.Influence] - FactionState.CovertActions.Length);
				FactionState.AddNewCovertActions(NewGameState, NumActionsToAdd, ExclusionList);

				ResHQ.CovertActionExclusionList = ExclusionList; // Save the updated Exclusion List to ResHQ
			}

			// Turn on the Faction plaque in the Ring if they have already been met
			if (!FacilityState.ActivateUpgrade(NewGameState, FactionState.GetRingPlaqueUpgradeName()))
			{
				`RedScreen("@jweinhoffer Tried to activate Faction Plaque in the Ring, but failed.");
			}
		}
	}
	
	`XCOMGAME.GameRuleset.SubmitGameState(NewGameState);
}

static function OnResistanceRingRemoved(StateObjectReference FacilityRef)
{
	local XComGameState NewGameState;
	local XComGameState_HeadquartersXCom NewXComHQ;

	NewGameState = class'XComGameStateContext_ChangeContainer'.static.CreateChangeState("On Resistance Ring Removed");
	RemoveFacility(NewGameState, FacilityRef, NewXComHQ);
	`XCOMGAME.GameRuleset.SubmitGameState(NewGameState);
}

function bool IsResistanceRingProjectActive(StateObjectReference FacilityRef)
{
	local XComGameState_HeadquartersResistance ResHQ;

	ResHQ = class'UIUtilities_Strategy'.static.GetResistanceHQ();

	return ResHQ.IsCovertActionInProgress();
}

function bool ResistanceRingNeedsAttention(StateObjectReference FacilityRef)
{
	local XComGameStateHistory History;
	local XComGameState_CovertAction ActionState;
	local XComGameState_HeadquartersResistance ResHQ;

	History = `XCOMHISTORY;	
	ResHQ = XComGameState_HeadquartersResistance(History.GetSingleGameStateObjectForClass(class'XComGameState_HeadquartersResistance'));
	
	if (ResHQ.IsCovertActionInProgress())
	{
		return false;
	}

	// If a covert action isn't in progress from the Ring, check to see if a new one is available
	foreach History.IterateByClassType(class'XComGameState_CovertAction', ActionState)
	{
		if (!ActionState.bStarted && ActionState.CanActionBeDisplayed() && ActionState.bNewAction)
		{
			return true;
		}
	}
	
	return false;
}

function bool IsResistanceFactionMet()
{
	local XComGameStateHistory History;
	local XComGameState_ResistanceFaction FactionState;

	History = `XCOMHISTORY;
	foreach History.IterateByClassType(class'XComGameState_ResistanceFaction', FactionState)
	{
		if (FactionState.bMetXCom)
		{
			return true;
		}
	}

	return false;
}

//---------------------------------------------------------------------------------------
// RECOVERY CENTER
//---------------------------------------------------------------------------------------
static function X2DataTemplate CreateRecoveryCenterTemplate()
{
	local X2FacilityTemplate Template;
	local ArtifactCost Resources;
	local StaffSlotDefinition StaffSlotDef;

	`CREATE_X2TEMPLATE(class'X2FacilityTemplate', Template, 'RecoveryCenter');
	Template.bIsCoreFacility = false;
	Template.bIsUniqueFacility = true;
	Template.bIsIndestructible = false;
	Template.MapName = "AVG_RecoveryCenter";
	Template.AnimMapName = "AVG_RecoveryCenter_Anim";
	Template.FlyInRemoteEvent = '';
//BEGIN AUTOGENERATED CODE: Template Overrides 'RecoveryCenter'
	Template.strImage = "img:///UILibrary_XPACK_StrategyImages.ChooseFacility_RecoveryCenter";
//END AUTOGENERATED CODE: Template Overrides 'RecoveryCenter'
	Template.SelectFacilityFn = SelectFacility;
	Template.OnFacilityRemovedFn = OnRecoveryCenterRemoved;
	Template.IsFacilityProjectActiveFn = IsRecoveryCenterProjectActive;
	Template.GetQueueMessageFn = GetRecoveryCenterQueueMessage;
	Template.NeedsAttentionFn = RecoveryCenterNeedsAttention;

	Template.UIFacilityClass = class'UIFacility_TrainingCenter';
	Template.FacilityEnteredAkEvent = "Play_Facility_Ambience_TrainingCenter";

	Template.BaseMinFillerCrew = 0;
	Template.MaxFillerCrew = 0;

	Template.FillerSlots.AddItem('Soldier');
	Template.FillerSlots.AddItem('Soldier');
	Template.FillerSlots.AddItem('Soldier');
	Template.FillerSlots.AddItem('Soldier');
	Template.FillerSlots.AddItem('Crew');
	Template.FillerSlots.AddItem('Crew');
	Template.FillerSlots.AddItem('Crew');
	Template.FillerSlots.AddItem('Crew');
	Template.FillerSlots.AddItem('Crew');
	Template.FillerSlots.AddItem('Any');
	Template.FillerSlots.AddItem('Any');

	// Staff Slots
	StaffSlotDef.StaffSlotTemplateName = 'RecoveryCenterBondStaffSlot';
	Template.StaffSlotDefs.AddItem(StaffSlotDef);

	StaffSlotDef.StaffSlotTemplateName = 'AWCSoldierStaffSlot';
	Template.StaffSlotDefs.AddItem(StaffSlotDef);

	// Stats
	Template.PointsToComplete = GetFacilityBuildDays(12);
	Template.iPower = -3;
	Template.UpkeepCost = 30;

	// Cost
	Resources.ItemTemplateName = 'Supplies';
	Resources.Quantity = 125;
	Template.Cost.ResourceCosts.AddItem(Resources);

	return Template;
}

static function OnRecoveryCenterRemoved(StateObjectReference FacilityRef)
{
	local XComGameState NewGameState;
	local XComGameState_HeadquartersXCom NewXComHQ;

	EmptyFacilityProjectStaffSlots(FacilityRef);

	NewGameState = class'XComGameStateContext_ChangeContainer'.static.CreateChangeState("On Recovery Center Removed");

	RemoveFacility(NewGameState, FacilityRef, NewXComHQ);

	`XCOMGAME.GameRuleset.SubmitGameState(NewGameState);
}

static function bool IsRecoveryCenterProjectActive(StateObjectReference FacilityRef)
{
	local XComGameStateHistory History;
	local XComGameState_HeadquartersXCom XComHQ;
	local XComGameState_FacilityXCom FacilityState;
	local XComGameState_StaffSlot StaffSlot;
	local XComGameState_HeadquartersProjectRespecSoldier RespecProject;
	local int i;

	History = `XCOMHISTORY;
	XComHQ = class'UIUtilities_Strategy'.static.GetXComHQ();
	FacilityState = XComGameState_FacilityXCom(History.GetGameStateForObjectID(FacilityRef.ObjectID));
	
	for (i = 0; i < FacilityState.StaffSlots.Length; i++)
	{
		StaffSlot = FacilityState.GetStaffSlot(i);
		if (StaffSlot.IsSlotFilled())
		{
			RespecProject = XComHQ.GetRespecSoldierProject(StaffSlot.GetAssignedStaffRef());
			if (RespecProject != none)
			{
				return true;
			}

			if (XComHQ.HasBondSoldiersProjectForUnit(StaffSlot.GetAssignedStaffRef()))
			{
				return true;
			}
		}
	}
	return false;
}

static function string GetRecoveryCenterQueueMessage(StateObjectReference FacilityRef)
{
	local XComGameState_HeadquartersXCom XComHQ;
	local XComGameState_FacilityXCom FacilityState;
	local XComGameState_StaffSlot StaffSlot;
	local XComGameState_HeadquartersProjectRespecSoldier RespecProject;
	local XComGameState_HeadquartersProjectBondSoldiers BondProject;
	local string strStatus, Message;
	local int i;

	XComHQ = class'UIUtilities_Strategy'.static.GetXComHQ();
	FacilityState = XComGameState_FacilityXCom(`XCOMHISTORY.GetGameStateForObjectID(FacilityRef.ObjectID));

	for (i = 0; i < FacilityState.StaffSlots.Length; i++)
	{
		StaffSlot = FacilityState.GetStaffSlot(i);
		if (StaffSlot.IsSlotFilled())
		{
			BondProject = XComHQ.GetBondSoldiersProjectForUnit(StaffSlot.GetAssignedStaffRef());
			if (BondProject != none)
			{
				if (BondProject.GetCurrentNumHoursRemaining() < 0)
					Message = class'UIUtilities_Text'.static.GetColoredText(class'UIFacility_Powercore'.default.m_strStalledResearch, eUIState_Warning);
				else
					Message = class'UIUtilities_Text'.static.GetTimeRemainingString(BondProject.GetCurrentNumHoursRemaining());

				strStatus = StaffSlot.GetBonusDisplayString() $ ":" @ Message;
				break;
			}

			RespecProject = XComHQ.GetRespecSoldierProject(StaffSlot.GetAssignedStaffRef());
			if (RespecProject != none)
			{
				if (RespecProject.GetCurrentNumHoursRemaining() < 0)
					Message = class'UIUtilities_Text'.static.GetColoredText(class'UIFacility_Powercore'.default.m_strStalledResearch, eUIState_Warning);
				else
					Message = class'UIUtilities_Text'.static.GetTimeRemainingString(RespecProject.GetCurrentNumHoursRemaining());

				strStatus = StaffSlot.GetBonusDisplayString() $ ":" @ Message;
				break;
			}
		}
	}

	return strStatus;
}

function bool RecoveryCenterNeedsAttention(StateObjectReference FacilityRef)
{
	local XComGameStateHistory History;
	local XComGameState_HeadquartersXCom XComHQ;
	local XComGameState_Unit UnitState, PairUnitState;
	local SoldierBond BondData;
	local StateObjectReference BondmateRef;
	local int idx;
	
	History = `XCOMHISTORY;
	XComHQ = class'UIUtilities_Strategy'.static.GetXComHQ();
	if (XComHQ.HasBondSoldiersProject())
	{
		// Do not display needs attention if a bond project is already active
		return false;
	}

	for (idx = 0; idx < XComHQ.Crew.Length; idx++)
	{
		UnitState = XComGameState_Unit(History.GetGameStateForObjectID(XComHQ.Crew[idx].ObjectID));

		// First check to make sure the unit is alive, uninjured, and has a bond available
		if (UnitState != none && UnitState.IsSoldier() && UnitState.CanBeStaffed() && UnitState.IsActive() && UnitState.HasSoldierBondAvailable(BondmateRef, BondData))
		{
			PairUnitState = XComGameState_Unit(History.GetGameStateForObjectID(BondmateRef.ObjectID));

			// Then check that the bondmate is also alive and uninjured
			if (PairUnitState != none && PairUnitState.IsSoldier() && PairUnitState.CanBeStaffed() && PairUnitState.IsActive())
			{
				// Finally make sure the bond is at least level 1, and that neither unit already has a bond project in progress
				if (BondData.BondLevel > 0 && !XComHQ.HasBondSoldiersProjectForUnit(UnitState.GetReference()) && !XComHQ.HasBondSoldiersProjectForUnit(BondmateRef))
				{
					return true;
				}
			}
		}
	}

	return false;
}
